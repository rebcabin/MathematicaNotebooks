(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    453173,       9553]
NotebookOptionsPosition[    424850,       9117]
NotebookOutlinePosition[    425439,       9139]
CellTagsIndexPosition[    425396,       9136]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Folds over Lists (Enumerable), Lazy Lists (Iterable) and Tasks (Observable)\
\>", "Title",ExpressionUUID->"f052d736-8221-41a5-b43c-9e374fde14a9"],

Cell[CellGroupData[{

Cell["Brian Beckman\[LineSeparator]30 Sept 2023\[LineSeparator]Version 4", \
"Subsection",
 CellChangeTimes->{{3.905069756742481*^9, 
  3.9050697718339767`*^9}},ExpressionUUID->"12a8d27a-3093-4407-b9e6-\
afa7a6aedb3e"],

Cell[TextData[{
 "We\[CloseCurlyQuote]d like to have the same operations over Lists (or ",
 StyleBox["enumerable",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " collections, more generally), lazy Lists (",
 StyleBox["Streams",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ", ",
 StyleBox["iterables",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ", or ",
 StyleBox["iteractive",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " [",
 StyleBox["sic",
  FontSlant->"Italic"],
 "] collections) and asynchronous tasks (",
 StyleBox["Observables",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " or ",
 StyleBox["reactive",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " collections). We call Lists, Streams, and Observables ",
 StyleBox["collection domains",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " (or monads, if you like that word). They each maintain ordered collections \
of values, differing only in the method and timing of delivery. Elements of \
Lists are distributed in memory, elements of Streams are computed on demand, \
and elements of Observables arrive asynchronously, on a schedule not known to \
the observer."
}], "Text",ExpressionUUID->"e25cd8f3-7aeb-4a08-80c7-441c7af2300a"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " ",
 StyleBox["Lists", "Input"],
 " have a rich set of built-in operations, like ",
 StyleBox["Map", "Input"],
 ", ",
 StyleBox["Scan", "Input"],
 ", ",
 StyleBox["Take", "Input"],
 ", ",
 StyleBox["Fold", "Input"],
 ", ",
 StyleBox["FoldList", "Input"],
 ", ",
 StyleBox["Drop", "Input"],
 ", ",
 StyleBox["Append", "Input"],
 ", and so on. For brevity, we work up examples just with analogues of ",
 StyleBox["Take", "Input"],
 " and ",
 StyleBox["FoldList", "Input"],
 " for Streams and Observables. It\[CloseCurlyQuote]s easy to build up other \
operations. "
}], "Text",ExpressionUUID->"107dfdf9-3c62-4319-9af3-6c740206b194"],

Cell[TextData[{
 "Many of these operations are ",
 StyleBox["higher-order",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ". Higher-order operations take ",
 StyleBox["query",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " functions as arguments. We may package sophisticated algorithms in \
queries, from mere counts to ",
 ButtonBox["incremental statistics",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://vixra.org/abs/1609.0044"], None},
  ButtonNote->"https://vixra.org/abs/1609.0044"],
 " to ",
 ButtonBox["Kalman filters",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://vixra.org/author/brian_beckman"], None},
  ButtonNote->"https://vixra.org/author/brian_beckman"],
 ". "
}], "Text",ExpressionUUID->"de558e0f-7398-4496-a325-2beba53559af"],

Cell[TextData[{
 StyleBox["The big message here is that we write the algorithms ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["once",
  FontSlant->"Italic",
  Background->RGBColor[1, 1, 0]],
 StyleBox[", and run them over all manner of collections: eager or lazy, \
in-memory or computed on-the-fly, synchronous or asynchronous.",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" Test them in a friendly environment of Lists; deploy them in an \
unfriendly environment of Observables, for instance.",
  Background->None]
}], "Text",ExpressionUUID->"b860d40c-4d12-4034-af5f-fb03833b19ab"],

Cell[TextData[{
 "Many higher-order operations are ",
 StyleBox["composable",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ": they compute Lists from Lists, Streams from Streams, Observables from \
Observable. That means we may build up more sophisticated algorithms from \
building blocks, as one does on the Unix command line with the pipe operator. "
}], "Text",ExpressionUUID->"68289856-8bd2-44af-9b25-34594a146926"],

Cell["\<\
Cross domains at will, with List as a rock-bottom intermediary. We show how \
to convert Lists into Streams and vice versa, and Lists into Observables, and \
vice versa.\
\>", "Text",ExpressionUUID->"d354f497-7fe5-4dcf-b296-ba9536c51a26"],

Cell[TextData[{
 "Finally, we want \[OpenCurlyDoubleQuote]ways out\[CloseCurlyDoubleQuote] of \
the collection domains: operations that return values from Lists, Streams, \
and Observables. A way-out from Mathematica ",
 StyleBox["List", "Input"],
 "s is ",
 StyleBox["Scan", "Input"],
 ". We posit ",
 StyleBox["subscribe",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " for Observables and ",
 StyleBox["forEach",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " for Streams. These should have the same signatures as ",
 "Scan",
 ", taking a collection and a unary ",
 "query",
 " that operates on each element of the collection. ",
 StyleBox["T",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox["ransformers",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " \[LongDash] ways to and from ",
 StyleBox["List", "Input"],
 "s for Streams and Observables, with ",
 StyleBox["List", "Input"],
 "s as the rock-bottom domain \[LongDash] are ",
 StyleBox["reify",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " and ",
 StyleBox["disperse",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " for Streams and ",
 StyleBox["harvest",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " and ",
 StyleBox["dispense",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " for Observables. "
}], "Text",ExpressionUUID->"b5bff67a-32c7-415c-9fbe-4e04e9bc5fba"],

Cell["The following diagram illustrates:", "Text",ExpressionUUID->"9626324b-9111-4250-98d3-2ee85b4f4e42"],

Cell[CellGroupData[{

Cell["Import[\"http://i.stack.imgur.com/hwY7H.png\"]", "Input",ExpressionUUID->"ba779110-556f-430d-9d42-eca7b15e5e43"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
oIsFCxZAYtOmTWRCj3fSBTCAu7u7s7OzhYWFh4dHYXV0QS6OwNLo6GjZZZH0
9HRfX19XV1c7OzvITE5Orpkupk6dCtVzlAoSshcxv1MKThdpaZSaWmW06NqV
72rVTUgXKJSApSyRgnTBlILQBYzsVenC2tp63rx5ZC1CF+RdhEuXLgVUGDt2
7NvoAjR//nzYuI+Pj2yeEKAFJycn+ApCMky6APyAxLp16wpfPaEDdDF79mxb
W9tDhw4dlorcqlEbKThdlJfTF7aYaKGpSa1fz3e16iakCxRKwFKWSEG6YEqR
6cLZ2dnBwSEgICAvL49JF7NmzQoODq7h3EXhq4sjzHlCgC7s7e0BIQBLKtFF
dna2jY0NfNeUKVNgs4QuyOwlM2bMWL16NbAKeU9ibaTgdAGaOZPS0nqDLh4+
5LtOdRPSBQolYClLpLBIF3BIe/CVyDtP666YmJjw8HBWNlUbcU8XGRkZc+bM
2SV95tTf35/MYrF7927IPHLkyP79+yFx4MCBQunTqT4+PjC+Q9tCZlRUVKH0
rglvb29YEb5x1apVkLN27drly5dX+paCggLAktmzZ8temnzo0CH4COvCduBf
hn0H3wKbhW8slN5NCmgxb968uLg4Pz8/cmsH7IuZM2d6enpCPoBNLf9BxaeL
Cxdeo4WGBn0nhrIL6QKFErCUJVLYogtyOl2mxMTED97U+vXrZYfY48aNGzZs
WB3rVntxTxeCl+LTBahr1wq6UFOj78RQdiFdoFAClrJEClt0Qc7wBwUF7ZEq
Nzc3OzubzMlQKJ0xkjyhAAfIx48fh3w4PGfOwJmenp6UlJSTk5OVlQVHx8OH
Dz8kVWpqqmweSzhm37t3L2xcdtEftgblYWuQmZeXV8d/oRDpQg5SCrpYv56+
IAJ0YWRE34mh7EK6QKEELGWJFHbpYu3atbKcgIAAKysrkh46dOicOXMgAdjg
7u5uaWkJhUePHk0uoMyfP5+c8XByclqwYEGliR2gWKH0CsKYMWNIjp2dHaAI
ZDo4OMDWyL0B48aNq/vlGKQL1qUUdEEmvlBTU+5pLmRCukChBCxliRR26QJI
YLpUOTk5b6MLSMNwQx51BEjYu3cvJBYtWpSdnR0dHS07d0Hu3wB4IPN+z5s3
D7aWmpoKmAFQMXHixEIpXdjb2ycmJpIJIqAOdfwvkC5Yl1LQBWjIEKWf5kIm
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
    "], {{0, 613.}, {714., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Comments" -> {
       "Software" -> "Created with the Wolfram Language : www.wolfram.com", 
        "Creation Time" -> 
        DateObject[{2015, 4, 12, 15, 21, 31.}, "Instant", "Gregorian", 
          None]}|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{714., 613.},
  PlotRange->{{0, 714.}, {0, 613.}}]], "Output",ExpressionUUID->"6605a2f8-\
30b4-40bb-85f6-2b0b47df0efa"]
}, {2}]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Typographical Conventions", "Section",ExpressionUUID->"4d4374d9-f28b-4945-a7cd-cf0bf798144d"],

Cell[TextData[{
 "Types are capitalised, like ",
 StyleBox["List",
  FontSlant->"Italic"],
 ", ",
 StyleBox["Stream",
  FontSlant->"Italic"],
 ", and ",
 StyleBox["Observable",
  FontSlant->"Italic"],
 ". "
}], "Text",ExpressionUUID->"26ff2868-87b5-45ec-81a5-64d3f311fbb2"],

Cell[TextData[{
 "Honoring the use-mention dichotomy, mentioned or appositive terms are in ",
 StyleBox["italics",
  FontSlant->"Italic"],
 ". The word ",
 StyleBox["List",
  FontSlant->"Italic"],
 " refers to the List type.",
 " To extract an element from a stream, apply ",
 StyleBox["extract",
  FontSlant->"Italic"],
 "."
}], "Text",ExpressionUUID->"d501d039-9874-438a-a13f-4949fdea4f6d"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " built-ins, like ",
 StyleBox["List", "Input"],
 " and ",
 StyleBox["FoldList", "Input"],
 ", are written in a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " input font, as shown to the left. Literal ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expressions like ",
 StyleBox["extract[___]", "Input"],
 " are in the same font. "
}], "Text",ExpressionUUID->"329d6b82-42fe-45e6-ab49-0d1efbd0b631"],

Cell[TextData[{
 "Some built-ins are types, like ",
 StyleBox["List", "Input"],
 ", and some are functions, like ",
 StyleBox["FoldList", "Input"],
 ". The word ",
 StyleBox["List",
  FontSlant->"Italic"],
 ", when referring to a general notion of the type of lists, is not in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " input font. "
}], "Text",ExpressionUUID->"fe7a4789-ee81-44fc-a2fe-37d079e87b6a"],

Cell[TextData[{
 "A general instance of a type like ",
 StyleBox["List",
  FontSlant->"Italic"],
 " is written in lower case: the list ",
 StyleBox["[1,2,3]", "Input"],
 " is an instance of type ",
 StyleBox["List",
  FontSlant->"Italic"],
 ". "
}], "Text",ExpressionUUID->"98905309-d246-47b2-9787-6d3ba1fd35d5"],

Cell[TextData[{
 "Sometimes ",
 StyleBox["List", "Input",
  FontSlant->"Italic"],
 ", in font, means an instance of type ",
 StyleBox["List", "Input"],
 ", when we wish to mean a list specific to ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " expression ",
 StyleBox["{1,2,3}", "Input"],
 " is both a list and a ",
 StyleBox["List", "Input"],
 "."
}], "Text",ExpressionUUID->"70080988-f92d-45e4-a6d3-b318790e3e91"],

Cell[TextData[{
 "New terms are written at first in ",
 StyleBox["bold italics",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ", later in appropriate typography."
}], "Text",ExpressionUUID->"9a9771f3-0d70-4d6c-86d5-b74e225dadf7"],

Cell[TextData[{
 "Double quote are pejorative: a \[OpenCurlyDoubleQuote]way out\
\[CloseCurlyDoubleQuote] of a list is some way of extracting a value, as in \
Mathematica\[CloseCurlyQuote]s ",
 StyleBox["Part", "Input"],
 " built-in."
}], "Text",ExpressionUUID->"78edebca-2808-49c3-80fd-7fe54ae8180f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lists", "Section",ExpressionUUID->"4b571f20-b189-446a-a817-b3f5674453a3"],

Cell[TextData[{
 "In general, any ",
 StyleBox["fold",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " takes three arguments: a binary query function, a starting output value, \
and a collection of input values. The binary query takes two arguments: the \
current output value and the current input value, and produces a new output \
value (the queries for right folds and left folds take their arguments in the \
opposite order, but we don\[CloseCurlyQuote]t consider left folds in this \
notebook). "
}], "Text",ExpressionUUID->"8348aaff-4cec-4cc7-9636-0f3d4597521e"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s basic ",
 StyleBox["Fold", "Input"],
 " produces just one final output value, exiting the collection domain of \
List. ",
 StyleBox["FoldList", "Input"],
 " produces all intermediate output values in a new ",
 StyleBox["List", "Input"],
 ". We want ",
 StyleBox["FoldList", "Input"],
 " because its results compose easily (and composition is good). Using ",
 ButtonBox["Haskell-style functional type notation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://en.wikibooks.org/wiki/Haskell/Type_basics#Functional_types"], 
    None},
  ButtonNote->
   "http://en.wikibooks.org/wiki/Haskell/Type_basics#Functional_types"],
 ", the type of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "\[CloseCurlyQuote]s ",
 StyleBox["FoldList", "Input"],
 " is as follows:"
}], "Text",ExpressionUUID->"cfd5f643-5f46-4eb2-8d35-f17910c44df0"],

Cell["\<\
FoldList :: binaryQueryFunction \[LongRightArrow] startingValue \
\[LongRightArrow] List \[LongRightArrow] List\
\>", "Subsection",ExpressionUUID->"4010ac88-bda8-48bd-be10-609a7af0249a"],

Cell[CellGroupData[{

Cell["Example: Fibonacci", "Subsection",ExpressionUUID->"14aa0131-528f-4f5e-b2c3-de6a4fb232e5"],

Cell["\<\
This version of Fibonacci doesn't actually use the values in the third \
argument, the collection, it just needs them to be there to \
\[OpenCurlyDoubleQuote]drive\[CloseCurlyDoubleQuote] the computation.\
\>", "Text",ExpressionUUID->"9d1c9d1e-1d87-4b50-97b0-f4261b4dc962"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldList", "[", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"binary", " ", "query", " ", "function"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"acc", ",", "v"}], "}"}], "\[Function]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"acc", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
      ",", 
      RowBox[{
       RowBox[{"acc", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
       "+", 
       RowBox[{
       "acc", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
     "}"}]}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"starting", " ", "value"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"collection", " ", 
     RowBox[{"(", "List", ")"}], " ", "of", " ", "other", " ", "ten", " ", 
     "values"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "9"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"96720a1d-d854-4380-af55-e53b3e54318a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", "34"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"34", ",", "55"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"55", ",", "89"}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"609c981c-7946-4935-93a4-dfbade1f8641"]
}, Open  ]],

Cell[TextData[{
 "This produces a new ",
 StyleBox["List", "Input"],
 " from the given ",
 StyleBox["List", "Input"],
 ". ",
 StyleBox["The new ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["List", "Input",
  Background->RGBColor[1, 1, 0]],
 StyleBox[" has one extra element",
  Background->RGBColor[1, 1, 0]],
 ", because ",
 StyleBox["FoldList", "Input"],
 " produces the starting accumulation value if the input ",
 StyleBox["List", "Input"],
 " is empty. Our request for 10 elements above \[LongDash] via ",
 StyleBox["Range[0,9]", "Input"],
 " \[LongDash] produces 11 elements. "
}], "Text",ExpressionUUID->"57fbddfb-a863-453a-b9ae-b10df04b4c43"],

Cell[TextData[{
 StyleBox["FoldList", "Input"],
 " cannot produce an empty ",
 StyleBox["List", "Input"],
 ", no matter what the query produces and no matter how many elements are in \
the input ",
 StyleBox["List", "Input"],
 ": "
}], "Text",ExpressionUUID->"dbe09fb3-1dcd-46f7-b0c6-d855f3715899"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], "\[Function]", "Null"}], ",", "42", ",", 
   
   RowBox[{"{", "}"}]}], "]"}]], "Input",ExpressionUUID->"a2e6694a-3434-4aaa-\
906a-6a40d7edfd31"],

Cell[BoxData[
 RowBox[{"{", "42", "}"}]], "Output",ExpressionUUID->"0629c563-437a-4aa5-8794-8e5bf9890769"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Streams", "Section",ExpressionUUID->"4855e935-3a80-4947-b2ce-8acfc933217d"],

Cell[TextData[{
 "Let's write folds for potentially infinite, lazy, iteractive [sic] \
collections \[LongDash] streams. Represent a stream as a pair of a value and \
a ",
 StyleBox["thunk",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " (procedure of no arguments); the thunk must produce another stream. An \
idiomatic way to write a thunk from any expression ",
 Cell[BoxData[
  FormBox["E", TraditionalForm]],ExpressionUUID->
  "cc4fc3f6-1ba0-4d7f-ba69-fe4f1cfaaf50"],
 " is ",
 StyleBox["E&", "Input"],
 ". It\[CloseCurlyQuote]s elegant and also idiomatic to pick up instances of ",
 "Stream",
 " by matching ",
 StyleBox["{v_, thunk_}", "Input"],
 ", so I won\[CloseCurlyQuote]t apologize for the lack of something like a ",
 "class",
 ". Classes are not idiomatic in Mathematica (though see ",
 ButtonBox["this blog post",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://mathematicaforprediction.wordpress.com/2016/03/20/object-\
oriented-design-patterns-in-mathematica/"], None},
  ButtonNote->
   "https://mathematicaforprediction.wordpress.com/2016/03/20/object-oriented-\
design-patterns-in-mathematica/"],
 ")."
}], "Text",ExpressionUUID->"c54e0d04-e573-4235-a886-95bfc2c19900"],

Cell[TextData[{
 "Here's an example stream factory that produces an infinite stream of ",
 StyleBox["Integers", "Input"],
 " starting at ",
 StyleBox["n",
  FontSlant->"Italic"],
 ":"
}], "Text",ExpressionUUID->"d3d24343-3c8b-435c-abd1-cc4af5822bc6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"integersFrom", "[", "n_Integer", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{"n", ",", 
    RowBox[{
     RowBox[{"integersFrom", "[", 
      RowBox[{"n", "+", "1"}], "]"}], "&"}]}], "}"}]}]], "Input",ExpressionUUI\
D->"c52d1b60-c1a9-4913-ab52-94b78d59f1df"],

Cell[TextData[{
 "Technically, any such stream is semi-infinite, producing all ",
 StyleBox["Integers", "Input"],
 " greater than or equal to ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "19ef6363-edff-4a49-8a85-47b316ca9d6c"],
 ". If we extract a value from a slot ",
 Cell[BoxData[
  FormBox[
   RowBox[{"<", "n"}], TraditionalForm]],ExpressionUUID->
  "084d533d-f837-468d-bda2-0a2e1306a1be"],
 ", we get ",
 StyleBox["Null", "Input"],
 ", which doesn\[CloseCurlyQuote]t print by itself."
}], "Text",ExpressionUUID->"ae499774-dd24-40af-b73e-04c58c131af9"],

Cell[CellGroupData[{

Cell["extract :: Stream \[LongRightArrow] value", "Subsection",ExpressionUUID->"97607785-6f97-4eda-aa29-9c9bb2140723"],

Cell[TextData[{
 StyleBox["Extract",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " is a (tail-recursive) way to get the 1-indexed, ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "60aa7ae8-a048-41b1-9372-bc02939a058f"],
 "-th value from any stream. ",
 StyleBox["Extract",
  FontSlant->"Italic"],
 " is not Stream-to-Stream, but Stream-to-Value \[LongDash] it\
\[CloseCurlyQuote]s a \[OpenCurlyDoubleQuote]way out.\[CloseCurlyDoubleQuote] \
Other ways-out of Stream are ",
 StyleBox["forEach", "Input"],
 " and ",
 StyleBox["reify", "Input"],
 ", and we get to them below. "
}], "Text",ExpressionUUID->"9a6a043e-cf31-4a91-9cf8-f29213548216"],

Cell[TextData[{
 "By convention, a finite stream has a ",
 StyleBox["Null", "Input"],
 " thunk at the end. ",
 StyleBox["Thus, the empty stream, by invoking such a thunk, is ",
  Background->RGBColor[1, 1, 0]],
 StyleBox["Null[]", "Input",
  Background->RGBColor[1, 1, 0]],
 ". Extracting anything from such a stream produces ",
 StyleBox["Null", "Input"],
 ", which does not print by itself."
}], "Text",ExpressionUUID->"fccb8e2c-3625-4eeb-8c5b-f92f2b530bcd"],

Cell[TextData[{
 "The following five, ordered patterns implement ",
 StyleBox["extract",
  FontSlant->"Italic"],
 ":"
}], "Text",ExpressionUUID->"f73b4113-1969-4e15-9a05-60982a6accc0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "extract", "]"}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"defaulting", " ", 
    RowBox[{"n", ":"}]}], " ", "*)"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"extract", "[", 
     RowBox[{"{", 
      RowBox[{"v_", ",", "thunk_"}], "}"}], "]"}], ":=", 
    RowBox[{"extract", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v", ",", "thunk"}], "}"}], ",", "1"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"base", " ", "case"}], ";", " ", 
    RowBox[{
     RowBox[{"Null", "[", "]"}], " ", "is", " ", "the", " ", "empty", " ", 
     "stream"}]}], " ", "*)"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"extract", "[", 
     RowBox[{
      RowBox[{"Null", "[", "]"}], ",", "_"}], "]"}], ":=", "Null"}], ";"}], 
  " ", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Do", " ", "this", " ", "if", " ", "you", " ", "just", " ", "want", " ", 
     "the", " ", "first", " ", "value"}], ";", " ", 
    RowBox[{"it", " ", "is", " ", "the", " ", "default"}]}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"extract", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v_", ",", "thunk_"}], "}"}], ",", "1"}], "]"}], ":=", "v"}], 
   ";"}], 
  RowBox[{"(*", " ", 
   RowBox[{"Somebody", " ", "invoked", " ", "my", " ", 
    RowBox[{"thunk", "!"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"tail", " ", 
    RowBox[{"recursion", ":"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"extract", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v_", ",", "thunk_"}], "}"}], ",", 
     RowBox[{"n_Integer", "/;", 
      RowBox[{"n", ">", "0"}]}]}], "]"}], ":=", 
   RowBox[{"extract", "[", 
    RowBox[{
     RowBox[{"thunk", "[", "]"}], ",", 
     RowBox[{"n", "-", "1"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"catch", "-", 
    RowBox[{"all", ":"}]}], " ", "*)"}], 
  RowBox[{
   RowBox[{
    RowBox[{"extract", "[", "___", "]"}], ":=", "Null"}], ";"}]}]}], "Input",E\
xpressionUUID->"39499a91-e2f7-44ac-89fe-5e68a65c5db3"],

Cell[TextData[{
 "Get the ",
 Cell[BoxData[
  FormBox["630000", TraditionalForm]],ExpressionUUID->
  "f2b3f437-72d8-454a-a075-43d6e6b7df69"],
 "-th integer efficiently (if not quickly):"
}], "Text",ExpressionUUID->"a37d99c3-8913-4a9f-a97a-242cc374eb70"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"$IterationLimit", "=", "Infinity"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"extract", "[", 
     RowBox[{
      RowBox[{"integersFrom", "[", "1", "]"}], ",", "630000"}], "]"}]}], 
   "]"}], "//", "AbsoluteTiming"}]], "Input",ExpressionUUID->"ffe27bb3-0081-\
4a18-af3a-528f8f9184a8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.643266`", ",", "630000"}], "}"}]], "Output",ExpressionUUID->\
"10703557-2c12-4bc0-a5db-9e17a63fb2e1"]
}, Open  ]],

Cell[TextData[{
 "Extracting 0 values produces ",
 StyleBox["Null", "Input"],
 " \[LongDash] nothing in the output cell; in fact, no output cell:"
}], "Text",ExpressionUUID->"a6da94b6-8f2d-42be-9496-a6cdf7be91a9"],

Cell[BoxData[
 RowBox[{"extract", "[", 
  RowBox[{
   RowBox[{"integersFrom", "[", "0", "]"}], ",", "0"}], "]"}]], "Input",Expres\
sionUUID->"ec98f85e-5411-41f2-b709-102a9bd68c3c"],

Cell[TextData[{
 "Extracting from before the beginning produces ",
 StyleBox["Null", "Input"],
 ":"
}], "Text",ExpressionUUID->"f77ad9cb-ddd2-44b9-bebd-1b298d71e6d7"],

Cell[BoxData[
 RowBox[{"extract", "[", 
  RowBox[{
   RowBox[{"integersFrom", "[", "0", "]"}], ",", 
   RowBox[{"-", "2"}]}], "]"}]], "Input",ExpressionUUID->"8ee2a74c-0eb9-4b71-\
94a8-6e806d640481"],

Cell[TextData[{
 "Here is how that works, by invoking the fifth, catch-all pattern, ",
 StyleBox["extract[___]", "Input"],
 ", in the definition of ",
 StyleBox["extract",
  FontSlant->"Italic"],
 ":"
}], "Text",ExpressionUUID->"d0033841-a275-408e-8243-9078dabfe178"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<TraceView\>\"", "]"}], "[", 
  RowBox[{"extract", "[", 
   RowBox[{
    RowBox[{"integersFrom", "[", "0", "]"}], ",", " ", 
    RowBox[{"-", "2"}]}], "]"}], "]"}]], "Input",ExpressionUUID->"69864aa9-\
a324-4c67-b11e-7351b8a2b2f7"],

Cell[BoxData[
 TagBox[
  DynamicModuleBox[{
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$ = {{1, 1}, {1, 
   2}}, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`maxDisplayDepth$$\
 = 4, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`maxChildDisplay$$ =
    5, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`timesRelativeTo$$ \
= "Outer", FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animating$$ = False, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animatingPos$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animationStart$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`outerColor$$ = 
   GrayLevel[0, 0], 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`forceVisible$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`baseBoxBudget$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`paneSize$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`allowContextHint$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`toolbarAtTop$$ = 
   False}, 
   TagBox[GridBox[{
      {
       DynamicBox[ToBoxes[
         If[Length[
            
            FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`traceSym$\
6942[]] > 0, 
          
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
DisplayTraceTreeView[
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`traceSym$6942, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`baseBoxBudget$\
$, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`forceVisible$$\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`outerColor$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animating$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animatingPos$$\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`allowContextHint$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`paneSize$$], 
          Framed[
           Style["Trace data no longer available.", "Text", 
            RGBColor[1, 0.1, 0.3, 0.8]], Background -> GrayLevel[0.62, 0.08], 
           FrameStyle -> GrayLevel[0.75, 0.5]]], StandardForm],
        ImageSizeCache->{712., {67., 77.}},
        TrackedSymbols:>{
         FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$}]},
      {
       StyleBox[
        RowBox[{
         TagBox[
          TooltipBox[
           PaneBox[
            TagBox[GridBox[{
               {
                ItemBox[
                 GraphicsBox[{CircleBox[{0, 0}, 1.3], 
                   {JoinForm["Bevel"], 
                    LineBox[{{-0.6, 0.6}, {0, 0}, {0, 1.2}}]}}],
                 Background->GrayLevel[0.65, 0.15],
                 StripOnInput->False], 
                ItemBox[
                 PaneBox[
                  TagBox[
                   TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{"Outer"->"\<\"Outer\"\>", 
                    "Total"->"\<\"Total\"\>", "Parent"->"\<\"Parent\"\>"}, 
                    Dynamic[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$]],
                    Appearance->{"Default" -> None, "Pressed" -> "Palette"},
                    Background->RGBColor[0, 0, 0, 0],
                    BaseStyle->(FontSize -> 15),
                    ButtonFunction:>{},
                    ContentPadding->False,
                    Enabled->False,
                    Evaluator->None,
                    ImageMargins->{{-2, -2}, {-1, -1}},
                    Method->"Preemptive"],
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$ = Part[{
                    "Outer" -> "Outer", "Total" -> "Total", "Parent" -> 
                    "Parent"}, 
                    Mod[Part[
                    
                    FirstPosition[{
                    "Outer" -> "Outer", "Total" -> "Total", "Parent" -> 
                    "Parent"}, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$, {0}], 1] + 1, 
                    
                    Length[{
                    "Outer" -> "Outer", "Total" -> "Total", "Parent" -> 
                    "Parent"}], 1], 1]), Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]],
                   MouseAppearanceTag["LinkHand"]],
                  Alignment->{Center, Center},
                  ImageSize->{Automatic, 23}],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False]}
              },
              AutoDelete->False,
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"]],
           "\"Times relative to\""],
          Annotation[#, "Times relative to", "Tooltip"]& ], "\<\"\"\>", 
         TagBox[
          TooltipBox[
           PaneBox[
            TagBox[GridBox[{
               {
                ItemBox[
                 
                 GraphicsBox[
                  LineBox[{{{-1, 1}, {-1, 0.1}, {1, 0.1}}, {{0, 0.1}, {
                    0, -1}, {1, -1}}}]],
                 Background->GrayLevel[0.65, 0.15],
                 StripOnInput->False], 
                ItemBox[
                 
                 TemplateBox[{{{-1, 0}, {1, 0}}, If[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$ > 2, 
                    PreDecrement[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$]]& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False], 
                PaneBox[
                 
                 InputFieldBox[Dynamic[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$, (
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$ = Max[
                    Round[#], 2])& ], Number,
                  Alignment->{Center, Center},
                  BaseStyle->(FontColor -> GrayLevel[0.5]),
                  FieldSize->{1, 1}],
                 Alignment->{Center, Center},
                 ImageSize->{Automatic, 23},
                 ScrollPosition->{0., 8.3333}], 
                ItemBox[
                 
                 TemplateBox[{{{{-1, 0}, {1, 0}}, {{0, -1}, {0, 1}}}, 
                   PreIncrement[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$]& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False]}
              },
              AutoDelete->False,
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"]],
           "\"Maximum display depth\""],
          Annotation[#, "Maximum display depth", "Tooltip"]& ], "\<\"\"\>", 
         TagBox[
          TooltipBox[
           PaneBox[
            TagBox[GridBox[{
               {
                ItemBox[
                 
                 GraphicsBox[{PointBox[{{-1, 1}, {-1, 0}, {-1, -1}}], 
                   LineBox[{{{0, 1}, {1, 1}}, {{0, 0}, {1, 0}}, {{0, -1}, {
                    1, -1}}}]}],
                 Background->GrayLevel[0.65, 0.15],
                 StripOnInput->False], 
                ItemBox[
                 
                 TemplateBox[{{{-1, 0}, {1, 0}}, If[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$ > 2, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
                    PreDecrement[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$]]& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False], 
                PaneBox[
                 
                 InputFieldBox[Dynamic[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$, (
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$ = Max[
                    Round[#], 2])& ], Number,
                  Alignment->{Center, Center},
                  BaseStyle->(FontColor -> GrayLevel[0.5]),
                  FieldSize->{1, 1}],
                 Alignment->{Center, Center},
                 ImageSize->{Automatic, 23}], 
                ItemBox[
                 
                 TemplateBox[{{{{-1, 0}, {1, 0}}, {{0, -1}, {0, 1}}}, (
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
                   PreIncrement[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$])& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False]}
              },
              AutoDelete->False,
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"]],
           "\"Maximum number of children displayed\""],
          
          Annotation[#, "Maximum number of children displayed", 
           "Tooltip"]& ], "\<\"\"\>", 
         DynamicModuleBox[{
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`searchEnabled$$\
 = True, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ = "", 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`searchPattern$$\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`searchPatternError$$ = \
{}, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`noResultFound$$ = 
          False, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$}, 
          PaneBox[
           TagBox[GridBox[{
              {
               ItemBox[
                PaneBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    
                    InputFieldBox[Dynamic[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, (
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ = #; 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ = If[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ == "", {}, 
                    If[
                    AllTrue[Internal`SymbolNameQ][
                    StringReplace[Alternatives["*", "@"] -> "A"][
                    StringSplit[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, "`"]]], 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPattern$$ = 
                    With[{FunctionRepository`$\
c1b927fd1f474ad4b6a5f61e95744e9e`pat = 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$}, 
                    Condition[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s, 
                    HoldPattern[
                    Except[
                    Symbol[
                    BlankNullSequence[]], 
                    Blank[Symbol]]]], 
                    Or[
                    StringMatchQ[
                    SymbolName[
                    Unevaluated[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s]], 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pat], 
                    StringMatchQ[
                    Context[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s] <> 
                    SymbolName[
                    Unevaluated[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s]], 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pat]]\
]]; {}, 
                    First[Quiet[
                    ToExpression[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, InputForm, HoldPattern]]; Part[
                    Reap[
                    Quiet[
                    Internal`HandlerBlock[{"Message", 
                    Replace[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`h, 
                    Hold[
                    Message[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`m, 
                    MessageName[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`sym, 
                    
                    Blank[]], 
                    Blank[]]], 
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`args, 
                    BlankNullSequence[]]], 
                    Blank[]]] :> Sow[
                    StringForm[
                    ReplaceAll[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`m, 
                    Messages[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`sym]]\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`args]]]}, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPattern$$ = 
                    ToExpression[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, InputForm, HoldPattern]]]], 2], {}]]]; 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$ = 
                    And[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ === {}, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ != ""]; Null)& ], String,
                    BaseStyle->(FontFamily -> Dynamic[
                    AbsoluteCurrentValue[{StyleHints, "CodeFont"}]]),
                    FieldHint->"Search pattern",
                    FieldHintStyle->(FontOpacity -> 0.7),
                    FieldSize->{12, 1}],
                    
                    EventHandlerTag[{
                    "ReturnKeyDown" :> 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$[1], Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]],
                   DynamicBox[
                    ToBoxes[
                    Style[
                    StringTrim[
                    StringRiffle[
                    Map[
                    ToString, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$], "\n"]], 
                    Darker[Red]], StandardForm]],
                   TooltipDelay->Dynamic[
                    If[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ === {}, Infinity, 0]]],
                  Annotation[#, 
                   Dynamic[
                    Style[
                    StringTrim[
                    StringRiffle[
                    Map[
                    ToString, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$], "\n"]], 
                    Darker[Red]]], "Tooltip"]& ],
                 Alignment->{Center, Center},
                 ImageSize->{Automatic, 23}],
                Background->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
noResultFound$$, If[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$ === None, 
                    Refresh[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$ = Clock[Infinity], None]]; 
                   If[Clock[Infinity] - 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$ > 1, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
noResultFound$$ = False]; (RGBColor[1, 0.5, 0.5, 0.3 - 0.3 #]& )[
                    Clip[
                    Clock[Infinity] - 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$]], 
                   If[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ =!= {}, 
                    RGBColor[1, 0.6, 0.6, 0.2], Transparent]]],
                FrameStyle->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ =!= {}, 
                   RGBColor[1, 0, 0, 0.5], 
                   GrayLevel[0.75]]],
                StripOnInput->False], 
               ItemBox[
                TooltipBox[
                 
                 TemplateBox[{{{{0, -1}, {-0.5, 0}, {0, 1}}, {{1, -1}, {
                    0.5, 0}, {1, 1}}}, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$[-1]& },
                  ""],
                 "Previous match"],
                Background->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$, 
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]], 
                   GrayLevel[0.75, 0.5]]],
                StripOnInput->False], 
               ItemBox[
                TooltipBox[
                 
                 TemplateBox[{{{{0, -1}, {0.5, 0}, {0, 
                    1}}, {{-1, -1}, {-0.5, 0}, {-1, 1}}}, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$[1]& },
                  ""],
                 "Next match"],
                Background->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$, 
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]], 
                   GrayLevel[0.75, 0.5]]],
                StripOnInput->False]}
             },
             AutoDelete->False,
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]],
          DynamicModuleValues:>{},
          
          Initialization:>(
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`doSearch$$[
              Pattern[
              FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`dir$, 
               Blank[]]] := 
            If[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$, 
              FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
              With[{FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`res$ = 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
SearchTree[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`traceSym$6942,
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPattern$$, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`dir$]}\
, 
                If[
                 MissingQ[
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`res$], 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animatingPos$$ = {}; 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
StartColorAnimation[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
noResultFound$$, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$]; Null, 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animatingPos$$ = (FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$ = 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`res$); 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
StartColorAnimation[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animating$$, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$]; Null]]; Null]; Null),
          
          UnsavedVariables:>{
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`doSearch$$}]}],
        StripOnInput->False,
        TemplateBoxOptions->{DisplayFunction->(TagBox[
          TagBox[
           ButtonBox[
            GraphicsBox[
             LineBox[#]], ButtonFunction :> {}, Evaluator -> None, 
            Appearance -> {"Default" -> None, "Pressed" -> "Palette"}, 
            Enabled -> False, ContentPadding -> False, 
            ImageMargins -> {{-2, -2}, {-1, -1}}, BaseStyle -> {}, Background -> 
            RGBColor[0, 0, 0, 0], Method -> "Preemptive"], 
           
           EventHandlerTag[{
            "MouseClicked" :> #2[], Method -> "Preemptive", PassEventsDown -> 
             Automatic, PassEventsUp -> True}]], 
          MouseAppearanceTag["LinkHand"]]& )},
        InputFieldBoxOptions->{Alignment->{Left, Center},
        Appearance->"Frameless"},
        TooltipBoxOptions->{
        TooltipStyle->{
         Background -> GrayLevel[0.97], FontColor -> GrayLevel[0.1], 
          CellFrameStyle -> GrayLevel[0.7]}},
        GridBoxOptions->{AutoDelete->False,
        BaseStyle->{
         Background :> CurrentValue[{StyleDefinitions, "Output", Background}],
           "Text"},
        FrameStyle->GrayLevel[0.75],
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.1}}}},
        GraphicsBoxOptions->{BaseStyle->{
          AbsoluteThickness[1.5], 
          AbsolutePointSize[1.5], 
          GrayLevel[0.5]},
        ImageSize->12,
        PlotRange->1.7},
        GraphicsBoxOptions -> {Antialiasing -> False}]}
     },
     BaseStyle->{"Output", FontWeight -> "Plain"},
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"],
   DynamicModuleValues:>{},
   Initialization:>(
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$[
       Pattern[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$, 
        Blank[]]] := (
      FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$[
       FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$] = <|
       "MainContext" -> 
        Map[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
DetermineMainContext, 
          Through[
           {
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
EvaluationInput, 
            FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
EvaluationOutput}[
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`traceSym$6942,
             FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$]]]|>); 
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$[
       BlankSequence[]][
       Blank[]] = 0; 
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$[
       Blank[]] = 1; Null),
   UnsavedVariables:>{
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animatingPos$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animationStart$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`forceVisible$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`baseBoxBudget$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`paneSize$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`allowContextHint$$}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",ExpressionUUID->"73e6d6ba-2d23-4350-\
873d-7187c7d0698e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["take :: Stream \[LongRightArrow] index \[LongRightArrow] Stream", \
"Subsection",ExpressionUUID->"aaf2e4db-b3ed-45a1-a20e-9fb0d67d906e"],

Cell[TextData[{
 "Here\[CloseCurlyQuote]s the first of the big results in this notebook: ",
 StyleBox["take", "Input"],
 " is a function that takes a finite number of elements from a possibly \
infinite stream and produces a finite stream:"
}], "Text",ExpressionUUID->"95b7f913-b1fc-411d-a070-e4bc3af564a3"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "take", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"take", "[", "stream_", "]"}], ":=", 
    RowBox[{"take", "[", 
     RowBox[{"stream", ",", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"the", " ", "empty", " ", "Stream"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"take", "[", 
     RowBox[{"_", ",", "0"}], "]"}], ":=", 
    RowBox[{"Null", "[", "]"}]}], ";"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"new", " ", "Stream", " ", "with", " ", "exactly", " ", "one", " ", 
    RowBox[{"element", ":"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"take", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v_", ",", "thunk_"}], "}"}], ",", "1"}], "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"v", ",", "Null"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"treating", " ", "Null", " ", "as", " ", "a", " ", 
    RowBox[{"thunk", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"recursive", " ", "case"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"take", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v_", ",", "thunk_"}], "}"}], ",", 
      RowBox[{"n_Integer", "/;", 
       RowBox[{"n", ">", "0"}]}]}], "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"v", ",", 
      RowBox[{
       RowBox[{"take", "[", 
        RowBox[{
         RowBox[{"thunk", "[", "]"}], ",", 
         RowBox[{"n", "-", "1"}]}], "]"}], "&"}]}], "}"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "What", " ", "happens", " ", "if", " ", "you", " ", "take", " ", "more", 
    " ", "than", " ", "the", " ", "Stream", " ", 
    RowBox[{"has", "?"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"take", "[", 
    RowBox[{
     RowBox[{"Null", "[", "]"}], ",", "_"}], "]"}], ":=", 
   RowBox[{"Null", "[", "]"}]}], ";"}]}], "Input",ExpressionUUID->"d3a0fd2a-\
b4a6-4208-9722-f5dd7231ed2b"],

Cell[TextData[{
 "Here it is at work on the infinite stream of all ",
 StyleBox["Integers", "Input"],
 ", producing a finite stream of three ",
 StyleBox["Integers", "Input"],
 ", from which we extract the first value:"
}], "Text",ExpressionUUID->"bc3e44bf-2df4-41ce-ad44-7a432e397119"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extract", "[", 
  RowBox[{
   RowBox[{"take", "[", 
    RowBox[{
     RowBox[{"integersFrom", "[", "1", "]"}], ",", "3"}], "]"}], ",", "1"}], 
  "]"}]], "Input",ExpressionUUID->"49b9b4cc-bf4b-4868-9fdc-df67076f38c1"],

Cell[BoxData["1"], "Output",ExpressionUUID->"a7d9d67d-10c7-47b5-83cb-fb3fc035366f"]
}, Open  ]],

Cell["... and the last value:", "Text",ExpressionUUID->"4f17d6f6-083e-42be-90ba-3fc5d88b58ee"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"extract", "[", 
  RowBox[{
   RowBox[{"take", "[", 
    RowBox[{
     RowBox[{"integersFrom", "[", "1", "]"}], ",", "3"}], "]"}], ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"c34d8800-a079-4a69-bad0-ed5f5f65cfbc"],

Cell[BoxData["3"], "Output",ExpressionUUID->"b4705682-9bd0-45c5-a336-8f125468f360"]
}, Open  ]],

Cell[TextData[{
 "If we extract too far into a finite stream, we get ",
 StyleBox["Null", "Input"],
 ", which doesn\[CloseCurlyQuote]t print to the notebook:"
}], "Text",ExpressionUUID->"e0b07d53-09e0-4caf-95d8-e8c0524aef7b"],

Cell[BoxData[
 RowBox[{"extract", "[", 
  RowBox[{
   RowBox[{"take", "[", 
    RowBox[{
     RowBox[{"integersFrom", "[", "1", "]"}], ",", "3"}], "]"}], ",", "400"}],
   "]"}]], "Input",ExpressionUUID->"23c572f8-6870-4e19-8f25-22657c3f5f12"],

Cell[CellGroupData[{

Cell["Finite Streams", "Subsubsection",ExpressionUUID->"affbc340-f209-4f6e-bce9-54150f2c1873"],

Cell[TextData[{
 "Test ",
 StyleBox["extract",
  FontSlant->"Italic"],
 " on a finite stream, produced by ",
 StyleBox["integersDownFrom", "Input"],
 ":"
}], "Text",ExpressionUUID->"f4b915c0-6b0d-48be-a1c2-238bbbba34b3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "integersDownFrom", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"integersDownFrom", "[", 
    RowBox[{"n_Integer", "/;", 
     RowBox[{"n", ">", "0"}]}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"n", ",", 
     RowBox[{
      RowBox[{"integersDownFrom", "[", 
       RowBox[{"n", "-", "1"}], "]"}], "&"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"integersDownFrom", "[", "_", "]"}], ":=", 
    RowBox[{"Null", "[", "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"the", " ", "empty", " ", "stream"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"integersDownFrom", "[", "3", "]"}]}], "Input",ExpressionUUID->\
"f6f403f9-5931-49fd-97b5-7be16991e7e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", 
   RowBox[{
    RowBox[{"integersDownFrom", "[", 
     RowBox[{"3", "-", "1"}], "]"}], "&"}]}], "}"}]], "Output",ExpressionUUID->\
"aac4f23d-5b5f-4745-bc39-906b88e1667f"]
}, Open  ]],

Cell["Extract all elements:", "Text",ExpressionUUID->"d75f6127-08f4-477a-bc80-ecd9cb645662"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"extract", "[", 
    RowBox[{
     RowBox[{"integersDownFrom", "[", "3", "]"}], ",", "i"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"9b628c1b-680a-429b-80ec-da372dd67fc3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "1"}], "}"}]], "Output",ExpressionUUID->\
"df10a39e-6f21-4a36-b0c2-419b2b31cca2"]
}, Open  ]],

Cell[TextData[{
 "Go too far \[LongDash] ",
 StyleBox["Null", "Input"],
 " in a ",
 StyleBox["List", "Input"],
 " self-prints:"
}], "Text",ExpressionUUID->"4220e5c5-df48-40cb-99b7-e8fcd8359cbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"extract", "[", 
    RowBox[{
     RowBox[{"integersDownFrom", "[", "3", "]"}], ",", " ", "i"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "5"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"61cc7cbd-7d58-45e6-ae0b-3fa9afa37eb7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "1", ",", "Null", ",", "Null"}], 
  "}"}]], "Output",ExpressionUUID->"e5ddd05b-e299-4435-bfb0-86e4ed07dfbc"]
}, Open  ]],

Cell[TextData[{
 "Look at the wrong end, ",
 StyleBox["and",
  FontSlant->"Italic"],
 " go too far:"
}], "Text",ExpressionUUID->"97a73f09-a4b5-4348-9c30-44174134fa7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"extract", "[", 
    RowBox[{
     RowBox[{"integersDownFrom", "[", "3", "]"}], ",", " ", "i"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"-", "2"}], ",", "5"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"20b20ac1-8651-4c92-bd8d-0e6483cf28b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "3", ",", "2", ",", "1", ",", "Null",
    ",", "Null"}], "}"}]], "Output",ExpressionUUID->"99758e69-af95-413d-8543-\
0ff2891c7f67"]
}, Open  ]],

Cell[TextData[{
 "Consider ",
 StyleBox["extract", "Input"],
 " on ",
 StyleBox["take", "Input"],
 ", staying within the known bounds; the first element of every ",
 StyleBox["take", "Input"],
 " is the first element of the original stream:"
}], "Text",ExpressionUUID->"e99238f4-fe6f-4a22-8fab-2864cdc053d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"extract", "[", 
    RowBox[{
     RowBox[{"take", "[", 
      RowBox[{
       RowBox[{"integersDownFrom", "[", "3", "]"}], ",", "i"}], "]"}], ",", 
     "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"0832a82e-46e6-47a6-9dc0-3912d03c7fbf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "3", ",", "3"}], "}"}]], "Output",ExpressionUUID->\
"cbf7fbb9-bd35-41b7-b437-8417cde6e743"]
}, Open  ]],

Cell["\<\
Exceed the bounds; if we take too many, we can still extract the first:\
\>", "Text",ExpressionUUID->"fdd76bdd-451c-4226-ac44-47423d4e3ad9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"extract", "[", 
    RowBox[{
     RowBox[{"take", "[", 
      RowBox[{
       RowBox[{"integersDownFrom", "[", "3", "]"}], ",", "i"}], "]"}], ",", 
     "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"-", "2"}], ",", " ", "5"}], "}"}]}], "]"}]], "Input",ExpressionU\
UID->"231fbe1d-69c6-4081-bffc-b19f136a00e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "3", ",", "3", ",", "3", ",", "3", 
   ",", "3"}], "}"}]], "Output",ExpressionUUID->"e993234e-da4d-4c7e-94dc-\
330455770cce"]
}, Open  ]],

Cell[TextData[{
 "a corner case \[LongDash] ",
 StyleBox["integersDownFrom", "Input"],
 " stops at 1, so ",
 StyleBox["integersDownFrom[n < 1]", "Input"],
 " must be empty:"
}], "Text",ExpressionUUID->"12cba0e3-bfc5-4fd7-8612-1cebc6f4b22e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"extract", "[", 
    RowBox[{"take", "[", 
     RowBox[{
      RowBox[{"integersDownFrom", "[", "0", "]"}], ",", " ", "i"}], "]"}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"-", "2"}], ",", "5"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"2c0b50ba-37d5-48bb-91c5-54a94744e6b3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", ",", "Null", 
   ",", "Null", ",", "Null"}], "}"}]], "Output",ExpressionUUID->"7597d653-\
210c-41e6-b320-b97d5ca2cd94"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["reify :: Stream \[LongRightArrow] List", "Subsection",ExpressionUUID->"352225d2-65af-46d4-81f4-0581ccc54265"],

Cell["\<\
Reify a stream to a list, rattling out all thunks (this is not \
tail-recursive; we might have to do better if we overflow the stack; it\
\[CloseCurlyQuote]s not hard to do better, the function just won\
\[CloseCurlyQuote]t be so obviously correct):\
\>", "Text",ExpressionUUID->"8eb5e985-0065-4386-ab37-1ed06cb3023d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "reify", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"reify", "[", 
     RowBox[{"Null", "[", "]"}], "]"}], ":=", 
    RowBox[{"{", "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"somebody", " ", "called", " ", "my", " ", "Null", " ", "thunk"}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"reify", "[", 
    RowBox[{"{", 
     RowBox[{"v_", ",", "Null"}], "}"}], "]"}], ":=", 
   RowBox[{"{", "v", "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"reify", "[", 
    RowBox[{"{", 
     RowBox[{"v_", ",", "thunk_"}], "}"}], "]"}], ":=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", "v", "}"}], ",", 
     RowBox[{"reify", "[", 
      RowBox[{"thunk", "[", "]"}], "]"}]}], "]"}]}], ";"}]}], "Input",Expressi\
onUUID->"4720cd9a-4912-4161-9f5c-76246e5a8eec"],

Cell[TextData[{
 "On a finite ",
 StyleBox["take", "Input"],
 " of an infinite stream:"
}], "Text",ExpressionUUID->"a9a0f876-d763-4802-881e-378a1fc6e3cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"take", "[", 
   RowBox[{
    RowBox[{"integersFrom", "[", "1", "]"}], ",", "3"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"2592b804-d436-42a6-94e1-b7b191000e81"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",ExpressionUUID->\
"f96ec101-a5b2-4197-bb40-334aea4703bc"]
}, Open  ]],

Cell["On a finite stream:", "Text",ExpressionUUID->"fda72770-ac29-403d-9aca-7711d0477f0b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"integersDownFrom", "[", "3", "]"}], "]"}]], "Input",ExpressionUUID->\
"2785f57e-c9ba-47e5-8623-d1c91559d9c0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "1"}], "}"}]], "Output",ExpressionUUID->\
"44c9389a-6fc5-4c92-bd42-a387e84818ca"]
}, Open  ]],

Cell["On an empty stream:", "Text",ExpressionUUID->"1050d609-9853-4ea8-b1a0-3dd3d70d2c5e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"Null", "[", "]"}], "]"}]], "Input",ExpressionUUID->"d23153cd-7d0b-\
425e-aca8-48ad18cd6cb8"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"0c34c1bb-c6ab-445f-b677-3f669907eca8"]
}, Open  ]],

Cell["\<\
When you take too many from a finite stream, you get all elements, but no \
more, in a list:\
\>", "Text",ExpressionUUID->"eb4b0313-57e3-4059-8296-22f592d8498a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"take", "[", 
   RowBox[{
    RowBox[{"integersDownFrom", "[", "3", "]"}], ",", "5"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"0bd02c1d-5456-4d65-831e-dbaa337d59b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2", ",", "1"}], "}"}]], "Output",ExpressionUUID->\
"f743744f-03d4-43c9-ac2e-b670ae5312a9"]
}, Open  ]],

Cell[TextData[{
 "If you forget to call ",
 StyleBox["Null", "Input"],
 "-treated-as-a-thunk, ",
 StyleBox["reify",
  FontSlant->"Italic"],
 " does not reduce:"
}], "Text",ExpressionUUID->"1124b5f6-2f7c-46ed-b086-cb6e660f3ce9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", "Null", "]"}]], "Input",ExpressionUUID->"b5c28607-2aa5-4ae1-a7fc-05d4260d9fd9"],

Cell[BoxData[
 RowBox[{"reify", "[", "Null", "]"}]], "Output",ExpressionUUID->"89bb9126-bd52-4c0c-ab5e-e6782c3e432b"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["disperse :: List \[LongRightArrow] Stream", "Subsection",ExpressionUUID->"62ff6bca-05b2-4ca9-83dc-597365259df4"],

Cell["Go the other way, producing a finite stream from a list:", "Text",ExpressionUUID->"a4265fb0-e1ec-4558-b6e2-f14db9cd5394"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "disperse", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"disperse", "[", 
     RowBox[{"{", "}"}], "]"}], ":=", 
    RowBox[{"Null", "[", "]"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"the", " ", "empty", " ", "stream"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"disperse", "[", 
    RowBox[{"{", "x_", "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"x", ",", "Null"}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"disperse", "[", 
    RowBox[{"{", 
     RowBox[{"v_", ",", "xs__"}], "}"}], "]"}], ":=", 
   RowBox[{"{", 
    RowBox[{"v", ",", 
     RowBox[{
      RowBox[{"disperse", "[", 
       RowBox[{"{", "xs", "}"}], "]"}], "&"}]}], "}"}]}], ";"}]}], "Input",Exp\
ressionUUID->"4d33e28a-0cf9-4c30-adc3-418ea44b927c"],

Cell[TextData[{
 StyleBox["disperse", "Input"],
 " and ",
 StyleBox["reify", "Input"],
 " will round-trip. On an empty:"
}], "Text",ExpressionUUID->"627b9efe-ee0b-4cfc-8c0a-f9a5fb66311d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"disperse", "[", 
   RowBox[{"{", "}"}], "]"}], "]"}]], "Input",ExpressionUUID->"bc9b18ed-22a6-\
42f2-a86e-6a626052b10c"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"0b78695e-c1b4-4785-9b6d-e6d4443844cb"]
}, Open  ]],

Cell["On a finite collection:", "Text",ExpressionUUID->"7db34787-376e-423e-b3b5-ac6e230e5eec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"disperse", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}]], "Input",Expressio\
nUUID->"58b90001-b1bf-4cfe-ad72-a886d3286c64"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",ExpressionUUID->\
"5ea418e8-eaef-42a0-bace-f25655367bc5"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fibonaccis as a Stream", "Subsection",ExpressionUUID->"f7d72fc2-56ed-4b06-a2ca-07e984d26866"],

Cell[TextData[{
 "Here\[CloseCurlyQuote]s a direct, semi-infinite, non-tail recursive, \
fibonacci stream (with ",
 StyleBox["memoization",
  FontSlant->"Italic"],
 ", i.e., dynamic programming)"
}], "Text",ExpressionUUID->"28070502-b893-4c7b-b56a-cd575d38e429"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "fibonaccis", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fibonaccis", "[", "0", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"0", ",", 
     RowBox[{
      RowBox[{"fibonaccis", "[", "2", "]"}], "&"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fibonaccis", "[", "1", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{
      RowBox[{"fibonaccis", "[", "3", "]"}], "&"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fibonaccis", "[", "n_", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"Here", "'"}], "s", " ", "the", " ", "dynamic", " ", 
     RowBox[{"programming", ":", " ", 
      RowBox[{"create", " ", "a", " ", "static"}]}]}], ",", " ", 
    RowBox[{"value", "-", 
     RowBox[{
     "producing", " ", "rule", " ", "for", " ", "a", " ", "particular", " ", 
      RowBox[{"argument", "."}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"fibonaccis", "[", "n", "]"}], "=", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"(*", " ", "value", " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"extract", "[", 
       RowBox[{"fibonaccis", "[", 
        RowBox[{"n", "-", "1"}], "]"}], "]"}], "+", 
      RowBox[{"extract", "[", 
       RowBox[{"fibonaccis", "[", 
        RowBox[{"n", "-", "2"}], "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "thunk", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"fibonaccis", "[", 
       RowBox[{"n", "+", "1"}], "]"}], "&"}]}], "}"}]}]}]}], "Input",Expressio\
nUUID->"e64e1a54-8d1a-4ac1-8816-4f29670a2be7"],

Cell[TextData[{
 "This is efficient, modulo stack overflow: it can find ",
 ButtonBox["large Fibonacci numbers",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/\
fibtable.html#series"], None},
  ButtonNote->
   "http://www.maths.surrey.ac.uk/hosted-sites/R.Knott/Fibonacci/fibtable.\
html#series"],
 " quickly. Pick up the 200-th element of the semi-infinite stream:"
}], "Text",ExpressionUUID->"4fe51d35-e7b4-43db-a1d7-7f5a639a3f2f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"extract", "[", 
   RowBox[{
    RowBox[{"fibonaccis", "[", "0", "]"}], ",", "200"}], "]"}], "//", 
  "AbsoluteTiming"}]], "Input",ExpressionUUID->"a6f2351f-8fd3-453e-80ba-\
f96fd9498779"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.001796`", ",", "280571172992510140037611932413038677189525"}], 
  "}"}]], "Output",ExpressionUUID->"b6c05d20-26fd-41d8-a74a-5cfbcaedf70c"]
}, Open  ]],

Cell["\<\
Pick up the first element of a semi-infinite stream that begins at element \
200:\
\>", "Text",ExpressionUUID->"72e475d0-225d-4478-884e-761317c44229"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"extract", "[", 
   RowBox[{"fibonaccis", "[", "200", "]"}], "]"}], "//", 
  "AbsoluteTiming"}]], "Input",ExpressionUUID->"2694cd2b-078b-4b56-8a67-\
b6317e9b753b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.000018`", ",", "280571172992510140037611932413038677189525"}], 
  "}"}]], "Output",ExpressionUUID->"6d9ed86a-2f5c-4ca0-8cfd-7cf49bb06a66"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
foldrStream :: binaryQueryFunction \[LongRightArrow] initialValue \
\[LongRightArrow] Stream \[LongRightArrow] Stream\
\>", "Subsection",ExpressionUUID->"acc62e18-07b3-49fb-b0b6-bb499f5fd394"],

Cell[TextData[{
 "Here is a ",
 StyleBox["fold",
  FontSlant->"Italic"],
 " for Stream with the same signature and semantics as ",
 StyleBox["FoldList", "Input"],
 " for ",
 StyleBox["List", "Input"],
 ". The \[OpenCurlyDoubleQuote]r\[CloseCurlyDoubleQuote] in \
\[OpenCurlyDoubleQuote]foldrStream\[CloseCurlyDoubleQuote] means \
\[OpenCurlyDoubleQuote]right.\[CloseCurlyDoubleQuote] This is a right-fold, \
distinct from the (not shown) left-fold:"
}], "Text",ExpressionUUID->"3fb402c5-bab1-4d60-b28a-99d912ad3738"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ClearAll", "[", "foldrStream", "]"}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Produce", " ", "a", " ", "singleton", " ", "from", " ", "an", " ", 
    "empty", " ", "stream"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"bf", " ", "is", " ", "binary", " ", "query", " ", "function"}], 
    ";", " ", 
    RowBox[{
    "z", " ", "begins", " ", "as", " ", "the", " ", "\"\<zero\>\"", " ", "of",
      " ", "the", " ", "fold"}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"foldrStream", "[", 
     RowBox[{"bf_", ",", "z_", ",", 
      RowBox[{"Null", "[", "]"}]}], "]"}], ":=", 
    RowBox[{"{", 
     RowBox[{"z", ",", "Null"}], "}"}]}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{"Null", " ", "treated", " ", "as", " ", "a", " ", "thunk"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"foldrStream", "[", 
    RowBox[{"bf_", ",", "z_", ",", 
     RowBox[{"{", 
      RowBox[{"v_", ",", "thunk_"}], "}"}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"z", ",", 
     RowBox[{
      RowBox[{"foldrStream", "[", 
       RowBox[{"bf", ",", 
        RowBox[{"bf", "[", 
         RowBox[{"z", ",", "v"}], "]"}], ",", 
        RowBox[{"thunk", "[", "]"}]}], "]"}], "&"}]}], "}"}]}], 
  ";"}]}], "Input",ExpressionUUID->"efeda4a4-73ff-45f1-a433-031907d78f9c"],

Cell[TextData[{
 StyleBox["foldrStream", "Input"],
 " produces a stream from a given stream. It\[CloseCurlyQuote]s first-class, \
as composable as ",
 StyleBox["take", "Input"],
 ". "
}], "Text",ExpressionUUID->"83d715c7-32d7-4d70-80f7-215c9175c2f2"],

Cell[TextData[{
 "Just as ",
 StyleBox["FoldList", "Input"],
 " can\[CloseCurlyQuote]t produce an empty ",
 StyleBox["List", "Input"],
 ", ",
 StyleBox["foldrStream", "Input"],
 " can\[CloseCurlyQuote]t produce an empty stream. "
}], "Text",ExpressionUUID->"808b2289-873a-4249-97aa-f48bff1c571c"],

Cell[TextData[{
 "This next example is another way \[LongDash] via ",
 StyleBox["foldrStream", "Input"],
 " \[LongDash] to produce a semi-infinite stream of fibonaccis. It produces \
",
 StyleBox["all",
  FontSlant->"Italic"],
 " the fibonaccis, plus the starting value at the beginning. That\
\[CloseCurlyQuote]s one more than an infinite number, which is exactly the \
same infinity. Otherwise, it\[CloseCurlyQuote]s just like our way of \
producing a ",
 StyleBox["List", "Input"],
 " of fibonaccis via ",
 StyleBox["FoldList", "Input"],
 " in Input 2 of this notebook:"
}], "Text",ExpressionUUID->"df66c78f-f439-41d4-b5d0-e632289b1813"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "allFibs", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"allFibs", "=", "\[IndentingNewLine]", 
   RowBox[{"foldrStream", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"acc", ",", "v"}], "}"}], "\[Function]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"acc", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}],
         ",", 
        RowBox[{
         RowBox[{
         "acc", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
         RowBox[{
         "acc", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
       "}"}]}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{"binary", " ", "query", " ", "function"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "\"\<zero\>\"", " ", "accumulation", " ", "of", " ", "the", " ", 
        "stream"}], ",", " ", 
       RowBox[{"i", ".", "e", "."}], ",", " ", 
       RowBox[{"first", " ", "element"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"integersFrom", "[", "0", "]"}]}], 
    RowBox[{"(*", " ", 
     RowBox[{"input", " ", "stream"}], "*)"}], "]"}]}], ";"}]}], "Input",Expre\
ssionUUID->"466e1b10-b54d-4ef8-84ab-904ddb64fa6d"],

Cell["Its first value is the starting value of the accumulation:", "Text",ExpressionUUID->"a5818454-578c-44cf-a09f-287dcc9efe85"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"take", "[", 
   RowBox[{"allFibs", ",", "1"}], "]"}], "]"}]], "Input",ExpressionUUID->\
"cdf2066c-1a10-4982-bd20-bb111c7a3b3d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1"}], "}"}], "}"}]], "Output",ExpressionUUID->"3c67e008-\
50cc-40e3-95f0-59b6c042e3ab"]
}, Open  ]],

Cell[TextData[{
 "The first 10 non-trivial fibonaccis must include one extra accumulation \
value, the zero accumulation, just as in the original ",
 StyleBox["FoldList", "Input"],
 " example. Just take one more, 11, than the desired number, 10:"
}], "Text",ExpressionUUID->"97e49037-270f-4949-a33d-fffd1045c22d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"take", "[", 
   RowBox[{"allFibs", ",", "11"}], "]"}], "]"}]], "Input",ExpressionUUID->\
"340fd896-675c-48b6-a196-7a74656fb625"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", "34"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"34", ",", "55"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"55", ",", "89"}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"f5ac8dcf-40b8-48c5-b801-2b2889fd6a41"]
}, Open  ]],

Cell[TextData[{
 StyleBox["foldrStream", "Input"],
 " also works on finite streams; here is the count-up variant of ",
 StyleBox["integersDownFrom", "Input"],
 ":"
}], "Text",ExpressionUUID->"e356db98-52f6-4f97-b599-d43a94988d00"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"integersTo", "[", "n_", "]"}], ":=", 
   RowBox[{"take", "[", 
    RowBox[{
     RowBox[{"integersFrom", "[", "1", "]"}], ",", "n"}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"24daa325-5ba7-422b-b5f5-fb24c6d2c4de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"integersTo", "[", "3", "]"}], "]"}]], "Input",ExpressionUUID->\
"bcff4fc8-9f2d-436f-9dea-6cac18cb9957"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",ExpressionUUID->\
"3c4bee3d-e06f-486a-b7ed-51cd3f93ea58"]
}, Open  ]],

Cell[TextData[{
 "Expect the empty stream, ",
 StyleBox["Null[]", "Input"],
 ", from the following (",
 StyleBox["Null[]", "Input"],
 " prints, unlike ",
 StyleBox["Null", "Input"],
 "):"
}], "Text",ExpressionUUID->"2a44fd8b-f2d8-4d1f-8e41-24b27d1adb38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"integersTo", "[", "0", "]"}]], "Input",ExpressionUUID->"24fa7578-0ea5-4473-b8cf-d6e064913baf"],

Cell[BoxData[
 RowBox[{"Null", "[", "]"}]], "Output",ExpressionUUID->"36d9f69b-b1c4-4d1a-b2c8-1bfda959f3fc"]
}, Open  ]],

Cell[TextData[{
 "Reify an empty ",
 StyleBox["List", "Input"],
 " from an empty stream:"
}], "Text",ExpressionUUID->"0bbf3b25-cb2a-43d9-88ff-e11325457664"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ResourceFunction", "[", "\"\<TraceView\>\"", "]"}], "[", 
  RowBox[{"reify", "[", 
   RowBox[{"integersTo", "[", "0", "]"}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"94b41624-0ff9-4aff-af95-1c1d00043f2c"],

Cell[BoxData[
 TagBox[
  DynamicModuleBox[{
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$ = {{1, 1}, {1, 
   2}}, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`maxDisplayDepth$$\
 = 4, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`maxChildDisplay$$ =
    5, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`timesRelativeTo$$ \
= "Outer", FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animating$$ = False, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animatingPos$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animationStart$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`outerColor$$ = 
   GrayLevel[0, 0], 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`forceVisible$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`baseBoxBudget$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`paneSize$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`allowContextHint$$, 
   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`toolbarAtTop$$ = 
   False}, 
   TagBox[GridBox[{
      {
       DynamicBox[ToBoxes[
         If[Length[
            
            FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`traceSym$\
17643[]] > 0, 
          
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
DisplayTraceTreeView[
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`traceSym$17643,
            FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`baseBoxBudget$\
$, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`forceVisible$$\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`outerColor$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animating$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animatingPos$$\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`allowContextHint$$, 
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`paneSize$$], 
          Framed[
           Style["Trace data no longer available.", "Text", 
            RGBColor[1, 0.1, 0.3, 0.8]], Background -> GrayLevel[0.62, 0.08], 
           FrameStyle -> GrayLevel[0.75, 0.5]]], StandardForm],
        ImageSizeCache->{385., {66.076, 76.924}},
        TrackedSymbols:>{
         FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$, 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$}]},
      {
       StyleBox[
        RowBox[{
         TagBox[
          TooltipBox[
           PaneBox[
            TagBox[GridBox[{
               {
                ItemBox[
                 GraphicsBox[{CircleBox[{0, 0}, 1.3], 
                   {JoinForm["Bevel"], 
                    LineBox[{{-0.6, 0.6}, {0, 0}, {0, 1.2}}]}}],
                 Background->GrayLevel[0.65, 0.15],
                 StripOnInput->False], 
                ItemBox[
                 PaneBox[
                  TagBox[
                   TagBox[
                    ButtonBox[
                    
                    PaneSelectorBox[{"Outer"->"\<\"Outer\"\>", 
                    "Total"->"\<\"Total\"\>", "Parent"->"\<\"Parent\"\>"}, 
                    Dynamic[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$]],
                    Appearance->{"Default" -> None, "Pressed" -> "Palette"},
                    Background->RGBColor[0, 0, 0, 0],
                    BaseStyle->(FontSize -> 15),
                    ButtonFunction:>{},
                    ContentPadding->False,
                    Enabled->False,
                    Evaluator->None,
                    ImageMargins->{{-2, -2}, {-1, -1}},
                    Method->"Preemptive"],
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$ = Part[{
                    "Outer" -> "Outer", "Total" -> "Total", "Parent" -> 
                    "Parent"}, 
                    Mod[Part[
                    
                    FirstPosition[{
                    "Outer" -> "Outer", "Total" -> "Total", "Parent" -> 
                    "Parent"}, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
timesRelativeTo$$, {0}], 1] + 1, 
                    
                    Length[{
                    "Outer" -> "Outer", "Total" -> "Total", "Parent" -> 
                    "Parent"}], 1], 1]), Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]],
                   MouseAppearanceTag["LinkHand"]],
                  Alignment->{Center, Center},
                  ImageSize->{Automatic, 23}],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False]}
              },
              AutoDelete->False,
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"]],
           "\"Times relative to\""],
          Annotation[#, "Times relative to", "Tooltip"]& ], "\<\"\"\>", 
         TagBox[
          TooltipBox[
           PaneBox[
            TagBox[GridBox[{
               {
                ItemBox[
                 
                 GraphicsBox[
                  LineBox[{{{-1, 1}, {-1, 0.1}, {1, 0.1}}, {{0, 0.1}, {
                    0, -1}, {1, -1}}}]],
                 Background->GrayLevel[0.65, 0.15],
                 StripOnInput->False], 
                ItemBox[
                 
                 TemplateBox[{{{-1, 0}, {1, 0}}, If[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$ > 2, 
                    PreDecrement[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$]]& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False], 
                PaneBox[
                 
                 InputFieldBox[Dynamic[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$, (
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$ = Max[
                    Round[#], 2])& ], Number,
                  Alignment->{Center, Center},
                  BaseStyle->(FontColor -> GrayLevel[0.5]),
                  FieldSize->{1, 1}],
                 Alignment->{Center, Center},
                 ImageSize->{Automatic, 23}], 
                ItemBox[
                 
                 TemplateBox[{{{{-1, 0}, {1, 0}}, {{0, -1}, {0, 1}}}, 
                   PreIncrement[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxDisplayDepth$$]& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False]}
              },
              AutoDelete->False,
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"]],
           "\"Maximum display depth\""],
          Annotation[#, "Maximum display depth", "Tooltip"]& ], "\<\"\"\>", 
         TagBox[
          TooltipBox[
           PaneBox[
            TagBox[GridBox[{
               {
                ItemBox[
                 
                 GraphicsBox[{PointBox[{{-1, 1}, {-1, 0}, {-1, -1}}], 
                   LineBox[{{{0, 1}, {1, 1}}, {{0, 0}, {1, 0}}, {{0, -1}, {
                    1, -1}}}]}],
                 Background->GrayLevel[0.65, 0.15],
                 StripOnInput->False], 
                ItemBox[
                 
                 TemplateBox[{{{-1, 0}, {1, 0}}, If[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$ > 2, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
                    PreDecrement[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$]]& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False], 
                PaneBox[
                 
                 InputFieldBox[Dynamic[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$, (
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$ = Max[
                    Round[#], 2])& ], Number,
                  Alignment->{Center, Center},
                  BaseStyle->(FontColor -> GrayLevel[0.5]),
                  FieldSize->{1, 1}],
                 Alignment->{Center, Center},
                 ImageSize->{Automatic, 23},
                 ScrollPosition->{0., 8.3333}], 
                ItemBox[
                 
                 TemplateBox[{{{{-1, 0}, {1, 0}}, {{0, -1}, {0, 1}}}, (
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
                   PreIncrement[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
maxChildDisplay$$])& },
                  ""],
                 Background->Dynamic[
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]]],
                 StripOnInput->False]}
              },
              AutoDelete->False,
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             "Grid"]],
           "\"Maximum number of children displayed\""],
          
          Annotation[#, "Maximum number of children displayed", 
           "Tooltip"]& ], "\<\"\"\>", 
         DynamicModuleBox[{
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`searchEnabled$$\
 = True, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ = "", 
          FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`searchPattern$$\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`searchPatternError$$ = \
{}, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`noResultFound$$ = 
          False, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$}, 
          PaneBox[
           TagBox[GridBox[{
              {
               ItemBox[
                PaneBox[
                 TagBox[
                  TooltipBox[
                   TagBox[
                    
                    InputFieldBox[Dynamic[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, (
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ = #; 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ = If[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ == "", {}, 
                    If[
                    AllTrue[Internal`SymbolNameQ][
                    StringReplace[Alternatives["*", "@"] -> "A"][
                    StringSplit[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, "`"]]], 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPattern$$ = 
                    With[{FunctionRepository`$\
c1b927fd1f474ad4b6a5f61e95744e9e`pat = 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$}, 
                    Condition[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s, 
                    HoldPattern[
                    Except[
                    Symbol[
                    BlankNullSequence[]], 
                    Blank[Symbol]]]], 
                    Or[
                    StringMatchQ[
                    SymbolName[
                    Unevaluated[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s]], 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pat], 
                    StringMatchQ[
                    Context[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s] <> 
                    SymbolName[
                    Unevaluated[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`s]], 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pat]]\
]]; {}, 
                    First[Quiet[
                    ToExpression[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, InputForm, HoldPattern]]; Part[
                    Reap[
                    Quiet[
                    Internal`HandlerBlock[{"Message", 
                    Replace[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`h, 
                    Hold[
                    Message[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`m, 
                    MessageName[
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`sym, 
                    
                    Blank[]], 
                    Blank[]]], 
                    Pattern[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`args, 
                    BlankNullSequence[]]], 
                    Blank[]]] :> Sow[
                    StringForm[
                    ReplaceAll[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`m, 
                    Messages[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`sym]]\
, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`args]]]}, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPattern$$ = 
                    ToExpression[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$, InputForm, HoldPattern]]]], 2], {}]]]; 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$ = 
                    And[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ === {}, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternString$$ != ""]; Null)& ], String,
                    BaseStyle->(FontFamily -> Dynamic[
                    AbsoluteCurrentValue[{StyleHints, "CodeFont"}]]),
                    FieldHint->"Search pattern",
                    FieldHintStyle->(FontOpacity -> 0.7),
                    FieldSize->{12, 1}],
                    
                    EventHandlerTag[{
                    "ReturnKeyDown" :> 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$[1], Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]],
                   DynamicBox[
                    ToBoxes[
                    Style[
                    StringTrim[
                    StringRiffle[
                    Map[
                    ToString, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$], "\n"]], 
                    Darker[Red]], StandardForm]],
                   TooltipDelay->Dynamic[
                    If[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ === {}, Infinity, 0]]],
                  Annotation[#, 
                   Dynamic[
                    Style[
                    StringTrim[
                    StringRiffle[
                    Map[
                    ToString, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$], "\n"]], 
                    Darker[Red]]], "Tooltip"]& ],
                 Alignment->{Center, Center},
                 ImageSize->{Automatic, 23}],
                Background->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
noResultFound$$, If[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$ === None, 
                    Refresh[
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$ = Clock[Infinity], None]]; 
                   If[Clock[Infinity] - 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$ > 1, 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
noResultFound$$ = False]; (RGBColor[1, 0.5, 0.5, 0.3 - 0.3 #]& )[
                    Clip[
                    Clock[Infinity] - 
                    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$]], 
                   If[
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ =!= {}, 
                    RGBColor[1, 0.6, 0.6, 0.2], Transparent]]],
                FrameStyle->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPatternError$$ =!= {}, 
                   RGBColor[1, 0, 0, 0.5], 
                   GrayLevel[0.75]]],
                StripOnInput->False], 
               ItemBox[
                TooltipBox[
                 
                 TemplateBox[{{{{0, -1}, {-0.5, 0}, {0, 1}}, {{1, -1}, {
                    0.5, 0}, {1, 1}}}, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$[-1]& },
                  ""],
                 "Previous match"],
                Background->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$, 
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]], 
                   GrayLevel[0.75, 0.5]]],
                StripOnInput->False], 
               ItemBox[
                TooltipBox[
                 
                 TemplateBox[{{{{0, -1}, {0.5, 0}, {0, 
                    1}}, {{-1, -1}, {-0.5, 0}, {-1, 1}}}, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
doSearch$$[1]& },
                  ""],
                 "Next match"],
                Background->Dynamic[
                  If[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$, 
                   If[
                    CurrentValue["MouseOver"], 
                    If[
                    CurrentValue[{"MouseButtonTest", 1}], 
                    GrayLevel[0.7, 0.82], 
                    GrayLevel[0.75, 0.5]], 
                    GrayLevel[0.65, 0.15]], 
                   GrayLevel[0.75, 0.5]]],
                StripOnInput->False]}
             },
             AutoDelete->False,
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Grid"]],
          DynamicModuleValues:>{},
          
          Initialization:>(
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`doSearch$$[
              Pattern[
              FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`dir$, 
               Blank[]]] := 
            If[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchEnabled$$, 
              FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
forceVisible$$ = True; 
              With[{FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`res$ = 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
SearchTree[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
traceSym$17643, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
searchPattern$$, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`dir$]}\
, 
                If[
                 MissingQ[
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`res$], 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animatingPos$$ = {}; 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
StartColorAnimation[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
noResultFound$$, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$]; Null, 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animatingPos$$ = (FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$$ = 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`res$); 
                 FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
StartColorAnimation[
                  FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animating$$, 
                   FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
animationStart$$]; Null]]; Null]; Null),
          
          UnsavedVariables:>{
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`doSearch$$}]}],
        StripOnInput->False,
        TemplateBoxOptions->{DisplayFunction->(TagBox[
          TagBox[
           ButtonBox[
            GraphicsBox[
             LineBox[#]], ButtonFunction :> {}, Evaluator -> None, 
            Appearance -> {"Default" -> None, "Pressed" -> "Palette"}, 
            Enabled -> False, ContentPadding -> False, 
            ImageMargins -> {{-2, -2}, {-1, -1}}, BaseStyle -> {}, Background -> 
            RGBColor[0, 0, 0, 0], Method -> "Preemptive"], 
           
           EventHandlerTag[{
            "MouseClicked" :> #2[], Method -> "Preemptive", PassEventsDown -> 
             Automatic, PassEventsUp -> True}]], 
          MouseAppearanceTag["LinkHand"]]& )},
        InputFieldBoxOptions->{Alignment->{Left, Center},
        Appearance->"Frameless"},
        TooltipBoxOptions->{
        TooltipStyle->{
         Background -> GrayLevel[0.97], FontColor -> GrayLevel[0.1], 
          CellFrameStyle -> GrayLevel[0.7]}},
        GridBoxOptions->{AutoDelete->False,
        BaseStyle->{
         Background :> CurrentValue[{StyleDefinitions, "Output", Background}],
           "Text"},
        FrameStyle->GrayLevel[0.75],
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Center}}},
        GridBoxFrame->{"Columns" -> {{True}}, "Rows" -> {{True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{0.2}}, "Rows" -> {{0.1}}}},
        GraphicsBoxOptions->{BaseStyle->{
          AbsoluteThickness[1.5], 
          AbsolutePointSize[1.5], 
          GrayLevel[0.5]},
        ImageSize->12,
        PlotRange->1.7},
        GraphicsBoxOptions -> {Antialiasing -> False}]}
     },
     BaseStyle->{"Output", FontWeight -> "Plain"},
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
    "Column"],
   DynamicModuleValues:>{},
   Initialization:>(
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$[
       Pattern[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$, 
        Blank[]]] := (
      FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$[
       FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$] = <|
       "MainContext" -> 
        Map[FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
DetermineMainContext, 
          Through[
           {
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
EvaluationInput, 
            FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`\
EvaluationOutput}[
           FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`traceSym$\
17643, FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`pos$]]]|>); 
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$[
       BlankSequence[]][
       Blank[]] = 0; 
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$[
       Blank[]] = 1; Null),
   UnsavedVariables:>{
    FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`treeMeta$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animatingPos$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`animationStart$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`childPos$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`forceVisible$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`baseBoxBudget$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`boxBudgets$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`paneSize$$, 
     FunctionRepository`$c1b927fd1f474ad4b6a5f61e95744e9e`allowContextHint$$}],
  Deploy,
  DefaultBaseStyle->"Deploy"]], "Output",ExpressionUUID->"483a94f7-a892-42da-\
b8ef-51ee8ad1f0f2"]
}, Open  ]],

Cell[TextData[{
 StyleBox["foldrStream", "Input"],
 " does not produce an empty result, but rather the first accumulator value, \
so we can never reify an empty ",
 StyleBox["List", "Input"],
 " from a ",
 StyleBox["foldrStream", "Input"],
 ":"
}], "Text",ExpressionUUID->"95aba928-3c12-4004-9a31-1d91e4e42844"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"foldrStream", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"acc", ",", "v"}], "}"}], "\[Function]", "v"}], ",", "42", ",", 
    
    RowBox[{"integersTo", "[", "0", "]"}]}], "]"}], "]"}]], "Input",Expression\
UUID->"2fd405e6-e8ce-40f0-aad4-4c16e960059f"],

Cell[BoxData[
 RowBox[{"{", "42", "}"}]], "Output",ExpressionUUID->"3b0c1196-2d63-4c12-be7a-f932a086c873"]
}, Open  ]],

Cell["\<\
As always with any fold, the length of the result is one more than the length \
of the input stream:\
\>", "Text",ExpressionUUID->"c9e8ca02-feac-4a71-8f6a-4599552a74b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"reify", "[", 
  RowBox[{"foldrStream", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"acc", ",", "v"}], "}"}], "\[Function]", "v"}], ",", "42", ",", 
    
    RowBox[{"integersTo", "[", "3", "]"}]}], "]"}], "]"}]], "Input",Expression\
UUID->"20701e63-8d60-4ba9-a461-5996afff2e18"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"42", ",", "1", ",", "2", ",", "3"}], "}"}]], "Output",ExpressionUUI\
D->"8cfc537d-bb79-4f21-9fe8-cb1b9116bbe8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Iterable", "Section",ExpressionUUID->"a72789e1-ea51-4958-bc78-110151e9477f"],

Cell[CellGroupData[{

Cell["forEach :: Stream \[LongRightArrow] unaryQueryFunction \
\[LongRightArrow] Null", "Subsection",ExpressionUUID->"ded42c74-ef18-4557-\
8354-2c820271e3e4"],

Cell[TextData[{
 "An ",
 StyleBox["interface",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " is a function that take a collection object as first argument, by \
convention, just as you'd emulate object-oriented programming in C. There are \
multiple approaches to object-oriented programming in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "; too many, in fact, so we won\[CloseCurlyQuote]t bother."
}], "Text",ExpressionUUID->"59bb4ef2-a97e-4bd7-ad41-f235590ad1b4"],

Cell[TextData[{
 "An ",
 StyleBox["iterable",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " is an interface with one method, ",
 StyleBox["forEach", "Input"],
 ", which takes an iterable and a unary, side-effecting query function, and \
invokes the query on every element of the iterable. It\[CloseCurlyQuote]s \
side-effecting way to pull values out of an iterable, so \
it\[CloseCurlyQuote]s a legitimate \[OpenCurlyDoubleQuote]way out.\
\[CloseCurlyDoubleQuote] The analogous, non-side-effecting operator is ",
 StyleBox["Map", "Input"],
 ", not pursued here for brevity. Streams are the only iterables in this \
notebook."
}], "Text",ExpressionUUID->"220c48f0-956f-485c-b9b6-f71c86838bc9"],

Cell[TextData[{
 "It\[CloseCurlyQuote]s bad to invoke ",
 StyleBox["forEach", "Input"],
 " on infinite streams, just as with ",
 StyleBox["reify", "Input"],
 ". You\[CloseCurlyQuote]ll get a non-terminating computation."
}], "Text",ExpressionUUID->"5789085f-2508-43c0-b681-9464d927b5d1"],

Cell[TextData[{
 "Here is ",
 StyleBox["forEach", "Input"],
 " for Stream:"
}], "Text",ExpressionUUID->"0129c179-5988-4070-aac9-8287471f2397"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "forEach", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"forEach", "[", 
    RowBox[{
     RowBox[{"Null", "[", "]"}], ",", "lambda_"}], "]"}], ":=", "Null"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"forEach", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"v_", ",", "thunk_"}], "}"}], ",", "lambda_"}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"lambda", "[", "v", "]"}], 
     RowBox[{"(*", " ", 
      RowBox[{"discard", " ", 
       RowBox[{"lambda", "'"}], "s", " ", "result"}], " ", "*)"}], ";", 
     RowBox[{"forEach", "[", 
      RowBox[{
       RowBox[{"thunk", "[", "]"}], ",", "lambda"}], "]"}], ";"}], ")"}]}], 
  ";"}]}], "Input",ExpressionUUID->"ce587060-b6fc-47f1-a169-55c48305d6d8"],

Cell[TextData[{
 "and here it is at work, side-effecting a ",
 StyleBox["take", "Input"],
 " of ",
 StyleBox["allFibs", "Input"],
 " via ",
 StyleBox["Print", "Input"],
 ":"
}], "Text",ExpressionUUID->"0ef335d7-ecf9-43fd-81cc-04874f05f576"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"forEach", "[", 
  RowBox[{
   RowBox[{"take", "[", 
    RowBox[{"allFibs", ",", "11"}], "]"}], ",", "Print"}], "]"}]], "Input",Exp\
ressionUUID->"6cd7200e-6196-45ec-87ec-bc4fddb04adc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1"}], "}"}]], "Print",ExpressionUUID->"3c350864-0415-45b0-8ae7-379e27f32fab"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1"}], "}"}]], "Print",ExpressionUUID->"f64aa089-6204-4e00-9159-e27739f79397"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Print",ExpressionUUID->"4228d358-8d42-43f4-8c96-1c147a59adcb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3"}], "}"}]], "Print",ExpressionUUID->"1acd0c29-df39-454f-bee8-89f0ed0550e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "5"}], "}"}]], "Print",ExpressionUUID->"8701c352-a054-42af-94bb-a10195908e91"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "8"}], "}"}]], "Print",ExpressionUUID->"04389429-a78a-4b9a-91ef-98c5f699ce69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8", ",", "13"}], "}"}]], "Print",ExpressionUUID->"ed87761d-a358-45ce-8526-52c89c47c6b2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"13", ",", "21"}], "}"}]], "Print",ExpressionUUID->"155bd354-a25a-47fa-9804-0ca5c5a7628d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"21", ",", "34"}], "}"}]], "Print",ExpressionUUID->"2ecc3796-15e9-4b3f-b06e-7fe3064815c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"34", ",", "55"}], "}"}]], "Print",ExpressionUUID->"3c212ca1-6c04-4581-861b-318d8f71c9e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"55", ",", "89"}], "}"}]], "Print",ExpressionUUID->"56837f8b-a781-4d5c-a4df-6f9767b539d4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Observable", "Section",ExpressionUUID->"0ec2eb59-df22-4c1e-ac06-95e7fed0ef0e"],

Cell[TextData[{
 "An ",
 StyleBox["observable",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " is an interface with one method: ",
 StyleBox["subscribe", "Input"],
 ", which has the same signature and semantics as ",
 StyleBox["forEach", "Input"],
 ". The difference is that an observable produces its results asynchronously. \
",
 StyleBox["The big lesson of this whole notebook is that the query function \
can\[CloseCurlyQuote]t tell whether it\[CloseCurlyQuote]s invoked on values \
in a list, values from a stream, or values (observations) from an observable",
  
  FontWeight->"Bold",
  Background->RGBColor[1, 1, 0]],
 ". Put your algorithm in the query, and you\[CloseCurlyQuote]ve separated \
the concerns of algorithms from the concern of synchrony. This strategy works \
for very big algorithms, like ",
 ButtonBox["Kalman filters",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://vixra.org/author/brian_beckman"], None},
  ButtonNote->"https://vixra.org/author/brian_beckman"],
 "."
}], "Text",ExpressionUUID->"a02ca608-858f-40a3-928f-1dc52d90bb62"],

Cell[TextData[{
 "Model the asynchronous behavior of observables with ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " ",
 StyleBox["Tasks", "Input",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 StyleBox["; ",
  FontSlant->"Italic"],
 "model the observables themselves differently because we need the ",
 StyleBox["subscribe", "Input"],
 " interface for them. "
}], "Text",ExpressionUUID->"8d357cad-78d3-492d-be05-08777a05aaed"],

Cell[TextData[{
 "Here's an finite ",
 StyleBox["Task", "Input"],
 ". You MUST interact with this, say via ",
 StyleBox["Dynamic", "Input"],
 ", to appreciate it. Evaluate the following input cell and watch the values \
tick-over five times in the output cell:"
}], "Text",ExpressionUUID->"e17aeb0c-eb82-49b2-85ee-7462c15e1a0f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"SessionSubmit", "[", 
  RowBox[{"ScheduledTask", "[", 
   RowBox[{
    RowBox[{"r$", "++"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Quantity", "[", 
       RowBox[{"1", ",", "\"\<Seconds\>\""}], "]"}], ",", " ", "5"}], "}"}]}],
    "]"}], "]"}]}], "Input",
 CellID->1828271894,ExpressionUUID->"4f65d16e-fbab-4223-9579-192e8d085f0d"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{12., {0.234, 12.441}}]], "Output",ExpressionUUID->\
"b1e2b70b-29ab-41e3-9e45-071accde1cf5"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{
       Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
       TemplateBox[{
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxOpener"]], 
                 ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 Thickness[0.041667], {
                  FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                   8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                   7.5, 5.5}, {16.5, 5.5}}}]}, {
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                  RGBColor[0.392, 0.392, 0.392], 
                  Thickness[0.020833], 
                  Opacity[1.], 
                  CapForm["Round"], 
                  JoinForm["Round"], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 
                    2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                   CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                  FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                   14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                   20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {21.959,
                    8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 11.5}, {
                   22.5, 12.65}, {22.318, 13.794}, {21.959, 14.898}}}]}, {
                  FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                   15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                   16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                   16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                   20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                   19.858, 19.009}, {17.961, 20.391}}}]}, {
                  FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                   1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                   2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                   4.2266}}}]}, {
                  FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                   2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 0.4996}, {
                   16.064, 1.2296}, {17.961, 2.6096}, {16.783, 4.2266}}}]}, {
                  FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                   5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                   3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                   8.7187}}}]}, {
                  FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                   5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                   4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                   8.7187}}}]}, {
                  FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                   21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                   9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                   17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                   16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                   20.391}}}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                   13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682, 
                   9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                   9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649, 
                   13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                PlotRange -> {{0., 24.}, {0., 24.}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"bbc10d0f-c322-480d-9b24-b67c7b57c67d\"", 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"r$", "++"}], Short], "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SummaryBoxCloser"]], 
                 ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                 None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                 "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                Dynamic[{
                  Automatic, 
                   3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
               GraphicsBox[{
                 Thickness[0.041667], {
                  FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5, 
                   7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                   8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                   7.5, 5.5}, {16.5, 5.5}}}]}, {
                  FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                  RGBColor[0.392, 0.392, 0.392], 
                  Thickness[0.020833], 
                  Opacity[1.], 
                  CapForm["Round"], 
                  JoinForm["Round"], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 
                    2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                   CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                  FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                   14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                   20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {21.959,
                    8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 11.5}, {
                   22.5, 12.65}, {22.318, 13.794}, {21.959, 14.898}}}]}, {
                  FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                   15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                   16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                   16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                   20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                   19.858, 19.009}, {17.961, 20.391}}}]}, {
                  FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                   1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                   2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                   4.2266}}}]}, {
                  FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                   2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 0.4996}, {
                   16.064, 1.2296}, {17.961, 2.6096}, {16.783, 4.2266}}}]}, {
                  FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                   5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                   3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                   8.7187}}}]}, {
                  FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                   5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                   4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                   8.7187}}}]}, {
                  FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                   21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                   9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                   0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                   17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                   16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                   20.391}}}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                   3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                   13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682, 
                   9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                   9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649, 
                   13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                PlotRange -> {{0., 24.}, {0., 24.}}], 
               GridBox[{{
                  RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"bbc10d0f-c322-480d-9b24-b67c7b57c67d\"", 
                    "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"r$", "++"}], Short], "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                  RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["5", "SummaryItem"]}]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                False, GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                BaseStyle -> {
                 ShowStringCharacters -> False, NumberMarks -> False, 
                  PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             BaselinePosition -> {1, 1}]}, 
          Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"], 
       DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->(
    "TaskObject[<|TaskUUID -> bbc10d0f-c322-480d-9b24-b67c7b57c67d, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Rem<<11>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",ExpressionUUID->"8634e950-75e5-48f8-99c0-\
c04ce20b8836"]
}, Open  ]],

Cell[TextData[{
 "That task cleans itself up. If you evaluate the following cell quickly \
enough, while the ",
 StyleBox["Task", "Input"],
 " is running, you\[CloseCurlyQuote]ll see the task in some kind of waiting \
area inside ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 ". If you evaluate the following cell after the ",
 StyleBox["Task", "Input"],
 " is finished, you\[CloseCurlyQuote]ll see an empty ",
 StyleBox["List", "Input"],
 "."
}], "Text",ExpressionUUID->"9c626f1b-107c-4889-8f72-6bda721a45c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tasks", "[", "]"}]], "Input",ExpressionUUID->"dba93a9b-6069-494b-826b-06f4de88ed8c"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"f883c3de-a82b-4f13-bb4e-1a0c7ea8a57a"]
}, Open  ]],

Cell[TextData[{
 "Observables must produce values every tick so we can subscribe query \
functions to them. Model observables as stateful thunks that produce new \
values every time they\[CloseCurlyQuote]re invoked, then invoke the thunks \
inside asynchronous ",
 StyleBox["Task", "Input"],
 "s that start when you subscribe. "
}], "Text",ExpressionUUID->"cd28ba0e-bb06-4c09-a247-7d2a31a1a3f8"],

Cell[TextData[{
 "Such tasks implement ",
 StyleBox["cold observables",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ", which don't produce values until subscribed. By contrast, ",
 StyleBox["hot observables",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 " produce values whether subscribed or not, and you can subscribe and \
unsubscribe on-the-fly. We'll finesse those now because the purpose here is \
to show that ",
 StyleBox["subscribe", "Input"],
 " is almost the same as ",
 StyleBox["forEach", "Input"],
 ". Our purpose here is illustrative, not to produce a complete ",
 "Observable",
 " library (see ",
 ButtonBox["this book by Lee Campbell",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.introtorx.com/content/v1.0.10621.0/14_\
HotAndColdObservables.html"], None},
  ButtonNote->
   "http://www.introtorx.com/content/v1.0.10621.0/14_HotAndColdObservables.\
html"],
 " for much more)."
}], "Text",ExpressionUUID->"17d49148-c0dc-43f6-9d32-8c46a1ca170c"],

Cell[CellGroupData[{

Cell["Fibonacci as an Observable", "Subsection",ExpressionUUID->"1ede5dcb-2196-4127-a67b-e29cd7b19860"],

Cell[TextData[{
 "Here\[CloseCurlyQuote]s a factory for fibonacci observables. Call it, and \
you\[CloseCurlyQuote]ll get a function that you can apply to a ",
 StyleBox["List", "Input"],
 " to get a number of results equal to the ",
 StyleBox["Length", "Input"],
 " of the ",
 StyleBox["List", "Input"],
 ":"
}], "Text",ExpressionUUID->"98697066-119c-4372-a225-fa794b204fe2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "fibonacciObservable", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fibonacciObservable", "[", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "=", "0"}], ",", 
      RowBox[{"b", "=", "1"}], ",", "oblFibs"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"oblFibs", "[", "]"}], ":=", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"a$", "=", "a"}], ",", 
          RowBox[{"b$", "=", "b"}], ",", 
          RowBox[{"result", "=", 
           RowBox[{"{", 
            RowBox[{"a", ",", "b"}], "}"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"a", "=", "b$"}], ";", "\[IndentingNewLine]", 
         RowBox[{"b", "=", 
          RowBox[{"a$", "+", "b$"}]}], ";", "\[IndentingNewLine]", 
         "result"}]}], "]"}]}], ";", "\[IndentingNewLine]", "oblFibs"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"43368460-ad08-40fe-95af-fa309086fe1a"],

Cell[TextData[{
 "Here we show 11 calls of ",
 StyleBox["oldFibs", "Input"],
 ", resulting in statefully updated values:"
}], "Text",ExpressionUUID->"e1a6779d-e0ab-41fa-9281-bd16fa7c1b95"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"oblFibs", "=", 
   RowBox[{"fibonacciObservable", "[", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"oblFibs", "[", "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", "11", "]"}]}]}], "Input",ExpressionUUID->"0f7bc37c-\
7932-4d1b-ad17-3cf2b442abff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "13"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"13", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", "34"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"34", ",", "55"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"55", ",", "89"}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"9b037a89-7461-4ae4-867b-95cdb5d11844"]
}, Open  ]],

Cell[TextData[{
 "Of course, we\[CloseCurlyQuote]ve left garbage in the environment (e.g., \
local variables created by the ",
 StyleBox["Module", "Input"],
 "). But we\[CloseCurlyQuote]ll finesse that now, too. All we did was call ",
 StyleBox["oldFibs", "Input"],
 " 11 times. We only want the last 10 values, but we must also produce the \
original accumulation value, just as was automatically done with ",
 StyleBox["FoldList", "Input"],
 " and ",
 StyleBox["foldrStream", "Input"],
 ". We want all our folds to behave the same."
}], "Text",ExpressionUUID->"fa37bae6-e6d8-4cbd-8cd6-0d9c99d3182d"],

Cell["Watch this until it stops changing:", "Text",ExpressionUUID->"d60bafda-ba9d-41fd-b6da-7710e6c6ada7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"oldFibs", "=", 
      RowBox[{"fibonacciObservable", "[", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"SessionSubmit", "[", 
     RowBox[{"ScheduledTask", "[", 
      RowBox[{
       RowBox[{"r$", "=", 
        RowBox[{"oldFibs", "[", "]"}]}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Quantity", "[", 
          RowBox[{"1", ",", "\"\<Seconds\>\""}], "]"}], ",", "11"}], "}"}]}], 
      "]"}], "]"}]}], "]"}], ";"}]}], "Input",ExpressionUUID->"7221aa5a-bb5a-\
4b1f-8066-2b6c1db31aaa"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{89., {4.1535, 12.675}}]], "Output",ExpressionUUID->\
"dde84b12-e2a1-436f-9852-4b481d0ec34b"]
}, Open  ]],

Cell["Catch it in time, or not; this shows tasks-in-progress:", "Text",ExpressionUUID->"f0423866-dcba-4bd7-a9d1-f377aef4794e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tasks", "[", "]"}]], "Input",ExpressionUUID->"3db59b91-b9b9-4056-8e4c-f95bfcb35065"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"cbdbbb54-7325-4816-8b41-f2f371f9bb8d\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"r$", "=", 
                    RowBox[{"oldFibs$21272", "[", "]"}]}], Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"cbdbbb54-7325-4816-8b41-f2f371f9bb8d\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{"r$", "=", 
                    RowBox[{"oldFibs$21272", "[", "]"}]}], Short], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["11", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"],
         DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->(
     "TaskObject[<|TaskUUID -> cbdbbb54-7325-4816-8b41-f2f371f9bb8d, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Rem<<11>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",ExpressionUUID->"b38d2e44-7b17-4e39-\
8b7f-da45d38e2563"]
}, Open  ]],

Cell[TextData[{
 "Just as we ",
 StyleBox["forEach", "Input"],
 " a unary query over a synchronous ",
 StyleBox["List", "Input"],
 " or stream, we ",
 StyleBox["subscribe", "Input"],
 " a unary query to an observable. Such queries are also called ",
 StyleBox["observers",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ", but they\[CloseCurlyQuote]re just ordinary unary functions."
}], "Text",ExpressionUUID->"02b9cd8f-02d9-4ea5-870a-f207bf18c919"]
}, Open  ]],

Cell[CellGroupData[{

Cell["subscribe :: Observable \[LongRightArrow] unaryQueryFunction \
\[LongRightArrow] Null", "Subsection",ExpressionUUID->"5f8d921c-c6f9-4eb2-\
a04b-d9df7f708e50"],

Cell[TextData[{
 "We emphasize: ",
 StyleBox["the syntax and semantics of ",
  FontWeight->"Bold"],
 StyleBox["forEach", "Input",
  FontWeight->"Bold"],
 StyleBox[" and ",
  FontWeight->"Bold"],
 StyleBox["subscribe", "Input",
  FontWeight->"Bold"],
 StyleBox[" are virtually identical",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"64e10b8e-4d4a-439c-b4b6-1110c0fcc7ed"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "subscribe", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subscribe", "[", 
   RowBox[{"observable_", ",", "observer_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"SessionSubmit", "[", "\[IndentingNewLine]", 
    RowBox[{"ScheduledTask", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"observer", "[", 
       RowBox[{"observable", "[", "]"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Quantity", "[", 
       RowBox[{"1", ",", "\"\<Seconds\>\""}], "]"}]}], "]"}], "]"}], 
   ";;"}]}]}], "Input",ExpressionUUID->"2efeffb8-07bd-4499-a3ec-70421bfdd1aa"],

Cell["\<\
Watch this until you get tired (it\[CloseCurlyQuote]s infinite), then clean \
it up:\
\>", "Text",ExpressionUUID->"c3bb7b18-8f0a-4beb-a1cf-86d63d4a64e7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"subscribe", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"fibonacciObservable", "[", "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"v", "\[Function]", 
    RowBox[{"(", 
     RowBox[{"r$", "=", "v"}], ")"}]}]}], "]"}]}], "Input",ExpressionUUID->\
"48812641-6ac8-45e9-a5c3-2a2f55f884bf"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{89., {4.1535, 12.675}}]], "Output",ExpressionUUID->\
"c3e1f2fe-fae3-4f80-b8de-443bc2c9ef33"],

Cell[BoxData[
 RowBox[{
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"bbdc6dc5-b1c0-4e86-8c99-be533130af16\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"oblFibs$22275", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"bbdc6dc5-b1c0-4e86-8c99-be533130af16\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"oblFibs$22275", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\[Infinity]", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"],
         DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->(
     "TaskObject[<|TaskUUID -> bbdc6dc5-b1c0-4e86-8c99-be533130af16, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Rem<<11>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], ";;", "All"}]], "Output",ExpressionUUID->"5781b052-\
7a4d-4233-8103-4c4fa613aed1"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "cleanupAllTasks", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"cleanupAllTasks", "[", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"TaskRemove", "[", 
    RowBox[{"Tasks", "[", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"cleanupAllTasks", "[", "]"}], ";"}]}], "Input",ExpressionUUID->\
"cc13ca5c-7938-4e3b-8c97-6e5532c9a2e1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Tasks", "[", "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "Check", " ", "that", " ", "there", " ", "are", " ", "none", " ", "left", 
    " ", 
    RowBox[{"running", "."}]}], " ", "*)"}]}]], "Input",ExpressionUUID->\
"62ec5868-333a-46b1-8462-21fd797f184f"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"2ebc5e4d-2baa-4989-91b7-ff8f0f990c32"]
}, Open  ]],

Cell[TextData[{
 "Here\[CloseCurlyQuote]s an infinite observable of all the integers, just \
like our iterable ",
 StyleBox["integersFrom", "Input"],
 ": "
}], "Text",ExpressionUUID->"a7d63e99-69a0-43a0-8ec7-883149b93eea"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "integersFromObservable", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"integersFromObservable", "[", "from_", "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"state", "=", "from"}], ",", "integersObl"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"integersObl", "[", "]"}], ":=", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"result", "=", "state"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"state", "=", 
           RowBox[{"state", "+", "1"}]}], ";", "\[IndentingNewLine]", 
          "result"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "integersObl"}]}], "]"}]}], ";"}]}], "Input",ExpressionUUID->"1c96f52d-\
e706-4c05-8930-493190cab905"],

Cell["Watch the following for a while, then clean it up:", "Text",ExpressionUUID->"0e689bf3-0073-41b6-8003-847ab4c65a28"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subscribe", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"integersFromObservable", "[", "42", "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"v", "\[Function]", 
     RowBox[{"(", 
      RowBox[{"r$", "=", "v"}], ")"}]}]}], "]"}], ";"}]}], "Input",ExpressionU\
UID->"b4d52662-0d62-41ef-a5a9-601a429ce51d"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{23., {0.234, 12.675}}]], "Output",ExpressionUUID->\
"3d1c6fd0-8902-4c6e-809b-3e1d8daa1944"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanupAllTasks", "[", "]"}]], "Input",ExpressionUUID->"c75c26fe-6841-43a6-9346-57bbd929f608"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"59092381-ff6d-471e-bb21-f16e854906d0\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"integersObl$23604", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"59092381-ff6d-471e-bb21-f16e854906d0\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"integersObl$23604", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\[Infinity]", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"],
         DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->(
     "TaskObject[<|TaskUUID -> 59092381-ff6d-471e-bb21-f16e854906d0, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Rem<<11>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",ExpressionUUID->"40fa522c-cf7b-4bbc-\
8695-31ec7e95719c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tasks", "[", "]"}]], "Input",ExpressionUUID->"38f40082-7c3e-4739-bc8f-26118072e862"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"4798448d-519e-4c04-87fa-1eb2bac948cf"]
}, Open  ]],

Cell[TextData[{
 "Here are our ways to get back and forth between ",
 StyleBox["Lists", "Input"],
 " and Observables (doing this right requires another aspect of observers, \
namely ",
 StyleBox["OnCompleted",
  FontWeight->"Bold",
  FontSlant->"Italic"],
 ", not covered here [see ",
 ButtonBox["the book by Campbell",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.introtorx.com/content/v1.0.10621.0/02_KeyTypes.html#\
IObserver"], None},
  ButtonNote->
   "http://www.introtorx.com/content/v1.0.10621.0/02_KeyTypes.html#IObserver"],
 " for more]. We\[CloseCurlyQuote]ll joke it with ",
 StyleBox["Null", "Input"],
 " for now)."
}], "Text",ExpressionUUID->"f8a05907-c8c3-4a5a-8be1-6290b10637bd"]
}, Open  ]],

Cell[CellGroupData[{

Cell["dispense :: List \[LongRightArrow] Observable", "Subsection",ExpressionUUID->"7a9c38bb-8b05-4da0-a11a-bd2c7a437a8b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "dispense", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"dispense", "[", 
    RowBox[{"{", "}"}], "]"}], ":=", 
   RowBox[{"Null", "&"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dispense", "[", "l_List", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"state", "=", "l"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", "}"}], "===", "state"}], ",", "\[IndentingNewLine]", 
       "Null", ",", "\[IndentingNewLine]", 
       RowBox[{"With", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"v", "=", 
           RowBox[{"First", "[", "state", "]"}]}], "}"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"state", "=", 
           RowBox[{"Rest", "[", "state", "]"}]}], ";", "\[IndentingNewLine]", 
          "v"}]}], "]"}]}], "]"}], "&"}]}], "]"}]}]}], "Input",ExpressionUUID->\
"7454e87b-4e2e-4350-9316-e567fa76165f"],

Cell["\<\
Here\[CloseCurlyQuote]s a finite instance. Clean it up once it starts to \
produce Null.\
\>", "Text",ExpressionUUID->"840e6615-79a8-4eed-a32e-3466e30d1b8f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subscribe", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dispense", "[", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"v", "\[Function]", 
     RowBox[{"(", 
      RowBox[{"r$", "=", "v"}], ")"}]}]}], "]"}], ";"}]}], "Input",ExpressionU\
UID->"5b61b030-bc5b-411e-9f4e-f6af0ac7b1c6"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{98., {4.1535, 12.675}}]], "Output",ExpressionUUID->\
"e5b55702-5295-4b05-9548-1b244bd2bea1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanupAllTasks", "[", "]"}]], "Input",ExpressionUUID->"44074674-c260-4184-b76e-b6d601889e2f"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"8993591e-36fe-4589-8c7a-b3d0765c520b\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "}"}], "===", "state$24939"}], ",", "Null", 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], 
                    "]"}], "&"}], ")"}], "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"8993591e-36fe-4589-8c7a-b3d0765c520b\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "}"}], "===", "state$24939"}], ",", "Null", 
                    ",", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}]}], 
                    "]"}], "&"}], ")"}], "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\[Infinity]", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"],
         DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->(
     "TaskObject[<|TaskUUID -> 8993591e-36fe-4589-8c7a-b3d0765c520b, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Rem<<11>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",ExpressionUUID->"2e161d3c-7465-45c8-\
8b6d-9762eaedc9f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tasks", "[", "]"}]], "Input",ExpressionUUID->"c228a13a-0cce-4137-8b66-bcead57c7e0c"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"0436c7e0-3283-4078-a55c-8a403a240c07"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["harvest :: Observable \[LongRightArrow] List", "Subsection",ExpressionUUID->"2865a30c-6cf2-4e41-9ebc-4830f8b21fd7"],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " doesn\[CloseCurlyQuote]t have general reference semantics, so we\
\[CloseCurlyQuote]ll just update a global variable, for illustrative purposes \
(by now you know we\[CloseCurlyQuote]re in a hurry, but see ",
 Cell[BoxData[
  FormBox[
   ButtonBox[
    RowBox[{"this", " ", "StackExchange", " ", "question"}],
    BaseStyle->"Hyperlink",
    ButtonData->{
      URL[
      "http://mathematica.stackexchange.com/questions/79723/how-to-reap-data-\
from-a-scheduledtask"], None},
    ButtonNote->
     "http://mathematica.stackexchange.com/questions/79723/how-to-reap-data-\
from-a-scheduledtask"], TraditionalForm]],ExpressionUUID->
  "0d0da6e0-da0b-478d-a770-654973e6ccf8"],
 " for work-in-progress to employ ",
 StyleBox["Reap", "Input"],
 " and ",
 StyleBox["Sow", "Input"],
 "). Also not that this uses ",
 StyleBox["AppendTo", "Input"],
 ", not the most efficient way (see ",
 ButtonBox["this blog entry",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://blog.wolfram.com/2011/12/07/10-tips-for-writing-fast-\
mathematica-code/"], None},
  ButtonNote->
   "http://blog.wolfram.com/2011/12/07/10-tips-for-writing-fast-mathematica-\
code/"],
 " for more), but we digress."
}], "Text",ExpressionUUID->"7a39bedf-5f5f-48d0-8b0f-5dc5bcbf2cf7"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "harvest", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"harvest", "[", "obl_", "]"}], ":=", "\[IndentingNewLine]", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"r$", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"subscribe", "[", 
      RowBox[{"obl", ",", 
       RowBox[{"v", "\[Function]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"v", "=!=", "Null"}], ",", 
          RowBox[{"AppendTo", "[", 
           RowBox[{"r$", ",", "v"}], "]"}]}], "]"}]}]}], "]"}]}], ")"}]}], 
  ";"}]}], "Input",ExpressionUUID->"e177fb22-d532-48a5-8845-71daa6c9c4b1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"harvest", "[", 
   RowBox[{"dispense", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "]"}], ";"}]}], "Input",\
ExpressionUUID->"8a7f4f06-8b9c-41bc-ab20-c86c0c58c73f"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{98., {4.1535, 12.675}}]], "Output",ExpressionUUID->\
"678ad4b6-ce12-4f92-baac-6bac73d7ccc5"]
}, Open  ]],

Cell["\<\
The task does not clean itself up. We can capture the output list by \
evaluating r$ non-dynamically before doing the cleanup:\
\>", "Text",ExpressionUUID->"d7efc743-fa3a-4336-a1f3-bfd3b96c0e7a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myTemp$", "=", "r$"}]], "Input",ExpressionUUID->"986089af-0887-4fdf-88e9-32938da73d4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], "}"}]], "Output",ExpressionUUID->\
"ad14bf1d-c01d-4b64-bb21-b7f1475f9750"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanupAllTasks", "[", "]"}]], "Input",ExpressionUUID->"45f9de7d-0f03-469f-b074-0ea0828888a5"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"097b956f-fb2f-42c7-a939-3778d92aff16\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"v", "=!=", "Null"}], ",", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"r$", ",", "v"}], "]"}]}], "]"}]}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "&"}], ")"}], "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"097b956f-fb2f-42c7-a939-3778d92aff16\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"v", "=!=", "Null"}], ",", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{"r$", ",", "v"}], "]"}]}], "]"}]}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], 
                    "]"}], "&"}], ")"}], "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\[Infinity]", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"],
         DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->(
     "TaskObject[<|TaskUUID -> 097b956f-fb2f-42c7-a939-3778d92aff16, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Re<<12>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",ExpressionUUID->"a49e4edd-1733-4943-\
860b-1051ca73d4c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tasks", "[", "]"}]], "Input",ExpressionUUID->"061ffdee-af52-473d-a56d-f15fba9667c9"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"564cbf01-ed72-4e70-a959-adf54ff90066"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["takeObservable :: Observable \[LongRightArrow] Integer \
\[LongRightArrow] Observable", "Subsection",ExpressionUUID->"05fbcf16-20f3-\
43f9-a360-9e48146f6389"],

Cell[TextData[{
 "Here\[CloseCurlyQuote]s our version of ",
 StyleBox["take",
  FontSlant->"Italic"],
 " for observables:"
}], "Text",ExpressionUUID->"e9bf11a5-5c51-4af6-9849-1b87e5044dd5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "takeObservable", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"takeObservable", "[", 
    RowBox[{"obl_", ",", 
     RowBox[{"n_Integer", "/;", 
      RowBox[{"n", "\[GreaterEqual]", "0"}]}]}], "]"}], ":=", 
   "\[IndentingNewLine]", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"newObl", ",", 
       RowBox[{"state", "=", "Null"}], ",", 
       RowBox[{"count", "=", "n"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"newObl", "[", "]"}], ":=", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"count", "===", "0"}], ",", "Null", ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"count", "--"}], ";", "\[IndentingNewLine]", 
          RowBox[{"obl", "[", "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
      "newObl"}]}], "]"}]}], ";"}]}], "Input",ExpressionUUID->"c25164ab-a4da-\
44aa-9796-f0fa7895ed42"],

Cell["and the usual test:", "Text",ExpressionUUID->"4779f33a-5cb1-4673-9cf6-edf259cabdcb"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subscribe", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"takeObservable", "[", 
     RowBox[{
      RowBox[{"integersFromObservable", "[", "42", "]"}], ",", "3"}], "]"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"v", "\[Function]", 
     RowBox[{"(", 
      RowBox[{"r$", "=", "v"}], ")"}]}]}], "]"}], ";"}]}], "Input",ExpressionU\
UID->"f866964b-e0d8-47ee-84dc-ca312103f2c6"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{47., {0.234, 13.884}}]], "Output",ExpressionUUID->\
"9c1360e6-a286-4f55-80f5-42229743d022"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanupAllTasks", "[", "]"}]], "Input",ExpressionUUID->"56975848-40f2-41a6-bfae-30e5e01bcb41"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"7499802b-12ef-424e-b017-8d4a33baddcd\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"newObl$28018", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"7499802b-12ef-424e-b017-8d4a33baddcd\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"newObl$28018", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\[Infinity]", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"],
         DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->(
     "TaskObject[<|TaskUUID -> 7499802b-12ef-424e-b017-8d4a33baddcd, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Re<<12>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",ExpressionUUID->"d5323c50-c6c8-4a0c-\
a2ad-995e8d9627ec"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tasks", "[", "]"}]], "Input",ExpressionUUID->"d24ba61a-47f0-43e3-a504-a9ee7d6ba2c7"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"00f149e8-1de6-4e4c-9913-7a21ae018d41"]
}, Open  ]],

Cell["\<\
All that\[CloseCurlyQuote]s left is to produce a new observable by folding a \
binary query function over another observable.\
\>", "Text",ExpressionUUID->"3bf328b7-c155-4f6c-95f8-e814d0f5d7b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
foldObservable :: binaryQueryFunction \[LongRightArrow] initialValue \
\[LongRightArrow] Observable \[LongRightArrow] Observable\
\>", "Subsection",ExpressionUUID->"9d9bb729-6b87-403d-b14a-07adff51799e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ClearAll", "[", "foldObservable", "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"foldObservable", "[", 
   RowBox[{"bf_", ",", "z_", ",", "obl_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"newObl", ",", 
      RowBox[{"z$", "=", "z"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"newObl", "[", "]"}], ":=", 
      RowBox[{"With", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"result", "=", "z$"}], "}"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"z$", "=", 
          RowBox[{"bf", "[", 
           RowBox[{"z$", ",", 
            RowBox[{"obl", "[", "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
         "result"}]}], "]"}]}], ";", "\[IndentingNewLine]", "newObl"}]}], 
   "]"}]}]}], "Input",ExpressionUUID->"9fb25353-32a9-456b-ae9a-a23c745442b5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"r$", "=", "0"}], ";", 
  RowBox[{"Dynamic", "[", "r$", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"subscribe", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"foldObservable", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"acc", ",", "v"}], "}"}], "\[Function]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
         "acc", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], ",", 
         RowBox[{
          RowBox[{
          "acc", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], "+", 
          
          RowBox[{
          "acc", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}]}], 
        "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"integersFromObservable", "[", "0", "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"v", "\[Function]", 
     RowBox[{"(", 
      RowBox[{"r$", "=", "v"}], ")"}]}]}], "]"}], ";"}]}], "Input",ExpressionU\
UID->"3ffed35a-020d-49a8-818f-12e2e29e5797"],

Cell[BoxData[
 DynamicBox[ToBoxes[r$, StandardForm],
  ImageSizeCache->{113., {4.1535, 12.675}}]], "Output",ExpressionUUID->\
"05a2a39e-1af3-4849-a3a6-be40b1b5e458"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cleanupAllTasks", "[", "]"}]], "Input",ExpressionUUID->"2effc82f-aceb-4ec1-a4ea-255ba61b6fe0"],

Cell[BoxData[
 RowBox[{"{", 
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["TaskObject", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{
        Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
        TemplateBox[{
          PaneSelectorBox[{False -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxOpener"]], 
                  ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"cac27877-2f21-4bd3-85ea-58ab6f4deca8\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"newObl$29353", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}], True -> GridBox[{{
                PaneBox[
                 ButtonBox[
                  DynamicBox[
                   FEPrivate`FrontEndResource[
                   "FEBitmaps", "SummaryBoxCloser"]], 
                  ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                  None, BaseStyle -> {}, Evaluator -> Automatic, Method -> 
                  "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
                 Dynamic[{
                   Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                GraphicsBox[{
                  Thickness[0.041667], {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     15.5}, {9.501, 15.5}, {9.501, 16.5}, {6.5, 16.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     5.5}, {9.501, 5.5}, {9.501, 6.5}, {6.5, 6.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     13.5}, {9.501, 13.5}, {9.501, 14.5}, {6.5, 14.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     11.5}, {9.501, 11.5}, {9.501, 12.5}, {6.5, 12.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     9.5}, {9.501, 9.5}, {9.501, 10.5}, {6.5, 10.5}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{6.5,
                     7.5}, {9.501, 7.5}, {9.501, 8.5}, {6.5, 8.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.392, 0.392, 0.392], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 6.5}, {8.5, 6.5}, {
                    8.5, 15.5}, {15.5, 15.5}}, {{16.5, 16.5}, {7.5, 16.5}, {
                    7.5, 5.5}, {16.5, 5.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 15.5}, {8.5, 15.5}, {8.5, 6.5}, {15.5, 6.5}}}]}, {
                   RGBColor[0.392, 0.392, 0.392], 
                   Thickness[0.020833], 
                   Opacity[1.], 
                   CapForm["Round"], 
                   JoinForm["Round"], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0,
                     2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 0}}, {{0, 2, 
                    0}}, {{0, 2, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
                     0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}}, {{{10., 10.222}, {10.768, 10.485}}, {{
                    12.457, 10.256}, {12., 10.875}}, {{11.543, 10.256}, {12., 
                    10.875}}, {{12., 10.875}, {11.261, 11.124}}, {{12., 
                    10.875}, {12.739, 11.124}}, {{12., 10.875}, {12., 
                    11.661}}, {{12.439, 12.223}, {12., 11.661}}, {{12.739, 
                    11.124}, {13.149, 11.706}}, {{12.762, 11.933}, {13.236, 
                    12.573}}, {{13.421, 10.871}, {12.739, 11.124}}, {{14., 
                    10.222}, {13.232, 10.485}}, {{13.149, 10.036}, {12.457, 
                    10.256}}, {{12.438, 9.5197}, {12.457, 10.256}}, {{12., 
                    8.7687}, {12., 9.5887}}, {{11.561, 9.5207}, {11.543, 
                    10.256}}, {{10.851, 10.036}, {11.543, 10.256}}, {{11.261, 
                    11.124}, {10.579, 10.871}}, {{10.851, 11.707}, {11.261, 
                    11.124}}, {{10.765, 12.574}, {11.238, 11.933}}, {{11.562, 
                    12.223}, {12., 11.661}}, {{12., 10.875}, {12., 
                    10.875}}, {{11.261, 11.124}, {10.768, 10.485}, {11.543, 
                    10.256}, {12., 9.5887}, {12.457, 10.256}, {13.232, 
                    10.485}, {12.739, 11.124}, {12.762, 11.933}, {12., 
                    11.661}, {11.238, 11.933}, {11.261, 
                    11.124}}, CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEqDg+4J69sKlRxmHNEYUORhqqDguPH5DN7VR1g
8lVLdZxluNUdDp5a6Lpts6rDDC2JqVcy1R08HlaJrGtXddDLW8y4R1XTwXLL
ibJ98uoOuUAua5EGVL+GQ8elew+4P2s6hDxeOvvIAw24vNu2z3+vVGg5LLhm
8t4CqN/BNG6Xp4+WA8g5gUDzIfp1HN7w7jOYyaXukGJ937/3uhaa+3Tg7ofp
B5rm6i6kAjcf6PrXj8KUHI55m3c6Au2PL/OXE+NShrsP5LzJnYoOa2SiUqyB
7ofYp+ywy5OHSRvoP5h+mP9h5qOHHwA2dXV1
                    "]}, 
                    CurveClosed -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
                    0, 0, 0, 0, 0, 0, 1, 1, 1}]}, {
                   FaceForm[{
                    RGBColor[0.902, 0.902, 0.902], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {1, 3, 3}}}, {{{21.959, 14.898}, {20.057, 
                    14.281}, {20.351, 13.376}, {20.5, 12.44}, {20.5, 11.5}, {
                    20.5, 10.559}, {20.351, 9.6244}, {20.057, 8.7184}, {
                    21.959, 8.1014}, {22.318, 9.2064}, {22.5, 10.349}, {22.5, 
                    11.5}, {22.5, 12.65}, {22.318, 13.794}, {21.959, 
                    14.898}}}]}, {
                   FaceForm[{
                    RGBColor[0.949, 0.949, 0.949], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{11.5, 22.5}, {11.5, 20.5}, {13.404, 20.5}, {
                    15.231, 19.903}, {16.783, 18.773}, {17.961, 20.391}, {
                    16.064, 21.771}, {13.83, 22.5}, {11.5, 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[0.929, 0.929, 0.929], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}}, {{{17.961, 20.391}, {17.961, 20.391}, {
                    16.783, 18.774}, {18.338, 17.642}, {19.47, 16.088}, {
                    20.057, 14.282}, {21.959, 14.899}, {21.241, 17.11}, {
                    19.858, 19.009}, {17.961, 20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.722, 0.722, 0.722], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 4.2266}, {5.0388, 2.6096}, {6.9358, 
                    1.2296}, {9.1698, 0.4996}, {11.5, 0.4996}, {11.5, 
                    2.4996}, {9.5958, 2.4996}, {7.7688, 3.0966}, {6.2168, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.78, 0.78, 0.78], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{16.783, 4.2266}, {15.231, 3.0966}, {13.404, 
                    2.4996}, {11.5, 2.4996}, {11.5, 0.4996}, {13.83, 
                    0.4996}, {16.064, 1.2296}, {17.961, 2.6096}, {16.783, 
                    4.2266}}}]}, {
                   FaceForm[{
                    RGBColor[0.851, 0.851, 0.851], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{20.057, 8.7187}, {19.47, 6.9117}, {18.338, 
                    5.3587}, {16.784, 4.2267}, {17.961, 2.6097}, {19.859, 
                    3.9907}, {21.242, 5.8907}, {21.959, 8.1017}, {20.057, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.675, 0.675, 0.675], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{2.9434, 8.7187}, {1.0414, 8.1017}, {1.7584, 
                    5.8907}, {3.1414, 3.9907}, {5.0394, 2.6097}, {6.2164, 
                    4.2267}, {4.6624, 5.3587}, {3.5304, 6.9117}, {2.9434, 
                    8.7187}}}]}, {
                   FaceForm[{
                    RGBColor[0.537, 0.537, 0.537], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}}}, {{{6.2168, 18.773}, {5.0388, 20.39}, {6.9358, 
                    21.77}, {9.1698, 22.5}, {11.5, 22.5}, {11.5, 20.5}, {
                    9.5958, 20.5}, {7.7688, 19.903}, {6.2168, 18.773}}}]}, {
                   FaceForm[{
                    RGBColor[0.584, 0.584, 0.584], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}}}, {{{5.0391, 20.391}, {3.1421, 19.009}, {1.7591, 
                    17.11}, {1.0411, 14.899}, {2.9431, 14.282}, {3.5301, 
                    16.088}, {4.6621, 17.642}, {6.2171, 18.774}, {5.0391, 
                    20.391}}}]}, {
                   FaceForm[{
                    RGBColor[0.631, 0.631, 0.631], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {1, 3, 3}, {0, 1, 0}}}, {{{1.041, 14.898}, {0.682, 
                    13.794}, {0.5, 12.65}, {0.5, 11.5}, {0.5, 10.349}, {0.682,
                     9.2064}, {1.041, 8.1014}, {2.943, 8.7184}, {2.649, 
                    9.6244}, {2.5, 10.559}, {2.5, 11.5}, {2.5, 12.44}, {2.649,
                     13.376}, {2.943, 14.281}, {1.041, 14.898}}}]}}, 
                 AspectRatio -> Automatic, ImageSize -> {24., 24.}, 
                 PlotRange -> {{0., 24.}, {0., 24.}}], 
                GridBox[{{
                   RowBox[{
                    TagBox["\"Task UUID: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    "\"cac27877-2f21-4bd3-85ea-58ab6f4deca8\"", 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task environment: \"", "SummaryItemAnnotation"],
                     "\[InvisibleSpace]", 
                    TagBox["\"Session\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Task type: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Scheduled\"", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox[
                    "\"Evaluation expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    TagBox[
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"v", ",", 
                    RowBox[{"r$", "=", "v"}]}], "]"}], "[", 
                    RowBox[{"newObl$29353", "[", "]"}], "]"}], Short], 
                    "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Run interval: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                   RowBox[{
                    TagBox["\"Total run count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\[Infinity]", "SummaryItem"]}]}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
                 False, GridBoxItemSize -> {
                  "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                 GridBoxSpacings -> {
                  "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                 BaseStyle -> {
                  ShowStringCharacters -> False, NumberMarks -> False, 
                   PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
              AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              BaselinePosition -> {1, 1}]}, 
           Dynamic[Typeset`open$$], ImageSize -> Automatic]}, "SummaryPanel"],
         DynamicModuleValues :> {}], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->(
     "TaskObject[<|TaskUUID -> cac27877-2f21-4bd3-85ea-58ab6f4deca8, \
TaskEnvironment -> Session, TaskType -> Scheduled, <<3>>, \
HandlerFunctionsKeys -> {Task, TaskUUID, TaskType, TaskStatus, \
TaskEnvironment, HandlerFunctions, HandlerFunctionsKeys, EventName, \
EvaluationExpression, <<4>>, Re<<12>>unt, NextScheduledTime, TotalRunCount, \
MessageOutput, PrintOutput}, AutoRemove -> True|>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",ExpressionUUID->"4403ad9d-7e49-41bb-\
8674-cc976550a7db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tasks", "[", "]"}]], "Input",ExpressionUUID->"6bde0c9e-bbb6-4500-930f-5d7311355d31"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"ba32436c-9b3c-42d0-ba11-cd0378f1977c"]
}, Open  ]],

Cell["\<\
There are lots of better ways to do this, but we\[CloseCurlyQuote]ve captured \
the gist.\
\>", "Text",ExpressionUUID->"6f622011-f225-407c-aa6e-913f6de4b53d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusion", "Section",ExpressionUUID->"9411e01a-7a1d-49ab-b062-a0f2d3689a0b"],

Cell[TextData[{
 "We\[CloseCurlyQuote]ve established that folding over ",
 StyleBox["List", "Input"],
 "s produces L",
 StyleBox["ist", "Input"],
 "s, folding over iterable streams produces iterable streams, and that \
folding over observables produces observables. ",
 StyleBox["All our algorithms, expressed as query functions, can run over \
finite, infinite, synchronous, and asynchronous collections",
  Background->RGBColor[1, 1, 0]],
 ". "
}], "Text",ExpressionUUID->"492e58ac-7791-44ec-97ea-f53862639739"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152, 1051},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
ShowSelection->True,
ShowCellTags->True,
Magnification:>1.5 Inherited,
FrontEndVersion->"13.3 for Mac OS X ARM (64-bit) (July 24, 2023)",
StyleDefinitions->FrontEnd`FileName[{"Report"}, "StandardReport.nb", 
  CharacterEncoding -> "UTF-8"],
ExpressionUUID->"adaeb66a-d1bb-481a-994c-2b84b966c75a"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 155, 2, 236, "Title",ExpressionUUID->"f052d736-8221-41a5-b43c-9e374fde14a9"],
Cell[CellGroupData[{
Cell[760, 28, 218, 4, 132, "Subsection",ExpressionUUID->"12a8d27a-3093-4407-b9e6-afa7a6aedb3e"],
Cell[981, 34, 1208, 37, 225, "Text",ExpressionUUID->"e25cd8f3-7aeb-4a08-80c7-441c7af2300a"],
Cell[2192, 73, 697, 25, 121, "Text",ExpressionUUID->"107dfdf9-3c62-4319-9af3-6c740206b194"],
Cell[2892, 100, 774, 23, 121, "Text",ExpressionUUID->"de558e0f-7398-4496-a325-2beba53559af"],
Cell[3669, 125, 585, 12, 121, "Text",ExpressionUUID->"b860d40c-4d12-4034-af5f-fb03833b19ab"],
Cell[4257, 139, 422, 8, 121, "Text",ExpressionUUID->"68289856-8bd2-44af-9b25-34594a146926"],
Cell[4682, 149, 248, 4, 87, "Text",ExpressionUUID->"d354f497-7fe5-4dcf-b296-ba9536c51a26"],
Cell[4933, 155, 1348, 47, 225, "Text",ExpressionUUID->"b5bff67a-32c7-415c-9fbe-4e04e9bc5fba"],
Cell[6284, 204, 105, 0, 52, "Text",ExpressionUUID->"9626324b-9111-4250-98d3-2ee85b4f4e42"],
Cell[CellGroupData[{
Cell[6414, 208, 118, 0, 105, "Input",ExpressionUUID->"ba779110-556f-430d-9d42-eca7b15e5e43"],
Cell[6535, 210, 68680, 1133, 785, "Output",ExpressionUUID->"6605a2f8-30b4-40bb-85f6-2b0b47df0efa"]
}, {2}]]
}, Open  ]],
Cell[CellGroupData[{
Cell[75261, 1349, 99, 0, 104, "Section",ExpressionUUID->"4d4374d9-f28b-4945-a7cd-cf0bf798144d"],
Cell[75363, 1351, 273, 11, 52, "Text",ExpressionUUID->"26ff2868-87b5-45ec-81a5-64d3f311fbb2"],
Cell[75639, 1364, 392, 12, 87, "Text",ExpressionUUID->"d501d039-9874-438a-a13f-4949fdea4f6d"],
Cell[76034, 1378, 479, 16, 87, "Text",ExpressionUUID->"329d6b82-42fe-45e6-ab49-0d1efbd0b631"],
Cell[76516, 1396, 412, 12, 87, "Text",ExpressionUUID->"fe7a4789-ee81-44fc-a2fe-37d079e87b6a"],
Cell[76931, 1410, 312, 10, 52, "Text",ExpressionUUID->"98905309-d246-47b2-9787-6d3ba1fd35d5"],
Cell[77246, 1422, 482, 17, 87, "Text",ExpressionUUID->"70080988-f92d-45e4-a6d3-b318790e3e91"],
Cell[77731, 1441, 231, 6, 52, "Text",ExpressionUUID->"9a9771f3-0d70-4d6c-86d5-b74e225dadf7"],
Cell[77965, 1449, 301, 6, 87, "Text",ExpressionUUID->"78edebca-2808-49c3-80fd-7fe54ae8180f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[78303, 1460, 79, 0, 104, "Section",ExpressionUUID->"4b571f20-b189-446a-a817-b3f5674453a3"],
Cell[78385, 1462, 570, 11, 156, "Text",ExpressionUUID->"8348aaff-4cec-4cc7-9636-0f3d4597521e"],
Cell[78958, 1475, 928, 26, 156, "Text",ExpressionUUID->"cfd5f643-5f46-4eb2-8d35-f17910c44df0"],
Cell[79889, 1503, 196, 3, 51, "Subsection",ExpressionUUID->"4010ac88-bda8-48bd-be10-609a7af0249a"],
Cell[CellGroupData[{
Cell[80110, 1510, 95, 0, 49, "Subsection",ExpressionUUID->"14aa0131-528f-4f5e-b2c3-de6a4fb232e5"],
Cell[80208, 1512, 283, 4, 87, "Text",ExpressionUUID->"9d1c9d1e-1d87-4b50-97b0-f4261b4dc962"],
Cell[CellGroupData[{
Cell[80516, 1520, 1143, 29, 250, "Input",ExpressionUUID->"96720a1d-d854-4380-af55-e53b3e54318a"],
Cell[81662, 1551, 768, 25, 95, "Output",ExpressionUUID->"609c981c-7946-4935-93a4-dfbade1f8641"]
}, Open  ]],
Cell[82445, 1579, 652, 19, 121, "Text",ExpressionUUID->"57fbddfb-a863-453a-b9ae-b10df04b4c43"],
Cell[83100, 1600, 298, 8, 87, "Text",ExpressionUUID->"dbe09fb3-1dcd-46f7-b0c6-d855f3715899"],
Cell[CellGroupData[{
Cell[83423, 1612, 263, 8, 63, "Input",ExpressionUUID->"a2e6694a-3434-4aaa-906a-6a40d7edfd31"],
Cell[83689, 1622, 106, 1, 63, "Output",ExpressionUUID->"0629c563-437a-4aa5-8794-8e5bf9890769"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[83856, 1630, 81, 0, 104, "Section",ExpressionUUID->"4855e935-3a80-4947-b2ce-8acfc933217d"],
Cell[83940, 1632, 1202, 30, 191, "Text",ExpressionUUID->"c54e0d04-e573-4235-a886-95bfc2c19900"],
Cell[85145, 1664, 250, 7, 52, "Text",ExpressionUUID->"d3d24343-3c8b-435c-abd1-cc4af5822bc6"],
Cell[85398, 1673, 290, 8, 63, "Input",ExpressionUUID->"c52d1b60-c1a9-4913-ab52-94b78d59f1df"],
Cell[85691, 1683, 582, 15, 89, "Text",ExpressionUUID->"ae499774-dd24-40af-b73e-04c58c131af9"],
Cell[CellGroupData[{
Cell[86298, 1702, 118, 0, 51, "Subsection",ExpressionUUID->"97607785-6f97-4eda-aa29-9c9bb2140723"],
Cell[86419, 1704, 666, 18, 122, "Text",ExpressionUUID->"9a6a043e-cf31-4a91-9cf8-f29213548216"],
Cell[87088, 1724, 460, 11, 105, "Text",ExpressionUUID->"fccb8e2c-3625-4eeb-8c5b-f92f2b530bcd"],
Cell[87551, 1737, 184, 5, 105, "Text",ExpressionUUID->"f73b4113-1969-4e15-9a05-60982a6accc0"],
Cell[87738, 1744, 2302, 71, 105, "Input",ExpressionUUID->"39499a91-e2f7-44ac-89fe-5e68a65c5db3"],
Cell[90043, 1817, 253, 6, 105, "Text",ExpressionUUID->"a37d99c3-8913-4a9f-a97a-242cc374eb70"],
Cell[CellGroupData[{
Cell[90321, 1827, 390, 11, 105, "Input",ExpressionUUID->"ffe27bb3-0081-4a18-af3a-528f8f9184a8"],
Cell[90714, 1840, 143, 3, 105, "Output",ExpressionUUID->"10703557-2c12-4bc0-a5db-9e17a63fb2e1"]
}, Open  ]],
Cell[90872, 1846, 213, 4, 105, "Text",ExpressionUUID->"a6da94b6-8f2d-42be-9496-a6cdf7be91a9"],
Cell[91088, 1852, 180, 4, 105, "Input",ExpressionUUID->"ec98f85e-5411-41f2-b709-102a9bd68c3c"],
Cell[91271, 1858, 166, 4, 105, "Text",ExpressionUUID->"f77ad9cb-ddd2-44b9-bebd-1b298d71e6d7"],
Cell[91440, 1864, 199, 5, 105, "Input",ExpressionUUID->"8ee2a74c-0eb9-4b71-94a8-6e806d640481"],
Cell[91642, 1871, 267, 7, 105, "Text",ExpressionUUID->"d0033841-a275-408e-8243-9078dabfe178"],
Cell[CellGroupData[{
Cell[91934, 1882, 294, 7, 105, "Input",ExpressionUUID->"69864aa9-a324-4c67-b11e-7351b8a2b2f7"],
Cell[92231, 1891, 27458, 619, 105, "Output",ExpressionUUID->"73e6d6ba-2d23-4350-873d-7187c7d0698e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[119738, 2516, 142, 1, 105, "Subsection",ExpressionUUID->"aaf2e4db-b3ed-45a1-a20e-9fb0d67d906e"],
Cell[119883, 2519, 307, 5, 105, "Text",ExpressionUUID->"95b7f913-b1fc-411d-a070-e4bc3af564a3"],
Cell[120193, 2526, 2149, 63, 105, "Input",ExpressionUUID->"d3a0fd2a-b4a6-4208-9722-f5dd7231ed2b"],
Cell[122345, 2591, 286, 6, 105, "Text",ExpressionUUID->"bc3e44bf-2df4-41ce-ad44-7a432e397119"],
Cell[CellGroupData[{
Cell[122656, 2601, 240, 6, 105, "Input",ExpressionUUID->"49b9b4cc-bf4b-4868-9fdc-df67076f38c1"],
Cell[122899, 2609, 83, 0, 105, "Output",ExpressionUUID->"a7d9d67d-10c7-47b5-83cb-fb3fc035366f"]
}, Open  ]],
Cell[122997, 2612, 94, 0, 105, "Text",ExpressionUUID->"4f17d6f6-083e-42be-90ba-3fc5d88b58ee"],
Cell[CellGroupData[{
Cell[123116, 2616, 240, 6, 105, "Input",ExpressionUUID->"c34d8800-a079-4a69-bad0-ed5f5f65cfbc"],
Cell[123359, 2624, 83, 0, 105, "Output",ExpressionUUID->"b4705682-9bd0-45c5-a336-8f125468f360"]
}, Open  ]],
Cell[123457, 2627, 225, 4, 105, "Text",ExpressionUUID->"e0b07d53-09e0-4caf-95d8-e8c0524aef7b"],
Cell[123685, 2633, 242, 6, 105, "Input",ExpressionUUID->"23c572f8-6870-4e19-8f25-22657c3f5f12"],
Cell[CellGroupData[{
Cell[123952, 2643, 94, 0, 105, "Subsubsection",ExpressionUUID->"affbc340-f209-4f6e-bce9-54150f2c1873"],
Cell[124049, 2645, 220, 7, 105, "Text",ExpressionUUID->"f4b915c0-6b0d-48be-a1c2-238bbbba34b3"],
Cell[CellGroupData[{
Cell[124294, 2656, 797, 24, 105, "Input",ExpressionUUID->"f6f403f9-5931-49fd-97b5-7be16991e7e7"],
Cell[125094, 2682, 220, 6, 105, "Output",ExpressionUUID->"aac4f23d-5b5f-4745-bc39-906b88e1667f"]
}, Open  ]],
Cell[125329, 2691, 92, 0, 105, "Text",ExpressionUUID->"d75f6127-08f4-477a-bc80-ecd9cb645662"],
Cell[CellGroupData[{
Cell[125446, 2695, 293, 8, 105, "Input",ExpressionUUID->"9b628c1b-680a-429b-80ec-da372dd67fc3"],
Cell[125742, 2705, 140, 3, 105, "Output",ExpressionUUID->"df10a39e-6f21-4a36-b0c2-419b2b31cca2"]
}, Open  ]],
Cell[125897, 2711, 194, 6, 105, "Text",ExpressionUUID->"4220e5c5-df48-40cb-99b7-e8fcd8359cbb"],
Cell[CellGroupData[{
Cell[126116, 2721, 298, 8, 105, "Input",ExpressionUUID->"61cc7cbd-7d58-45e6-ae0b-3fa9afa37eb7"],
Cell[126417, 2731, 167, 3, 105, "Output",ExpressionUUID->"e5ddd05b-e299-4435-bfb0-86e4ed07dfbc"]
}, Open  ]],
Cell[126599, 2737, 167, 5, 105, "Text",ExpressionUUID->"97a73f09-a4b5-4348-9c30-44174134fa7c"],
Cell[CellGroupData[{
Cell[126791, 2746, 329, 9, 105, "Input",ExpressionUUID->"20b20ac1-8651-4c92-bd8d-0e6483cf28b9"],
Cell[127123, 2757, 212, 5, 105, "Output",ExpressionUUID->"99758e69-af95-413d-8543-0ff2891c7f67"]
}, Open  ]],
Cell[127350, 2765, 308, 8, 105, "Text",ExpressionUUID->"e99238f4-fe6f-4a22-8fab-2864cdc053d1"],
Cell[CellGroupData[{
Cell[127683, 2777, 362, 11, 105, "Input",ExpressionUUID->"0832a82e-46e6-47a6-9dc0-3912d03c7fbf"],
Cell[128048, 2790, 140, 3, 105, "Output",ExpressionUUID->"cbf7fbb9-bd35-41b7-b437-8417cde6e743"]
}, Open  ]],
Cell[128203, 2796, 150, 2, 105, "Text",ExpressionUUID->"fdd76bdd-451c-4226-ac44-47423d4e3ad9"],
Cell[CellGroupData[{
Cell[128378, 2802, 398, 12, 105, "Input",ExpressionUUID->"231fbe1d-69c6-4081-bffc-b19f136a00e1"],
Cell[128779, 2816, 206, 5, 105, "Output",ExpressionUUID->"e993234e-da4d-4c7e-94dc-330455770cce"]
}, Open  ]],
Cell[129000, 2824, 240, 6, 105, "Text",ExpressionUUID->"12cba0e3-bfc5-4fd7-8612-1cebc6f4b22e"],
Cell[CellGroupData[{
Cell[129265, 2834, 369, 11, 105, "Input",ExpressionUUID->"2c0b50ba-37d5-48bb-91c5-54a94744e6b3"],
Cell[129637, 2847, 221, 5, 105, "Output",ExpressionUUID->"7597d653-210c-41e6-b320-b97d5ca2cd94"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[129919, 2859, 115, 0, 105, "Subsection",ExpressionUUID->"352225d2-65af-46d4-81f4-0581ccc54265"],
Cell[130037, 2861, 328, 5, 105, "Text",ExpressionUUID->"8eb5e985-0065-4386-ab37-1ed06cb3023d"],
Cell[130368, 2868, 920, 28, 105, "Input",ExpressionUUID->"4720cd9a-4912-4161-9f5c-76246e5a8eec"],
Cell[131291, 2898, 154, 4, 105, "Text",ExpressionUUID->"a9a0f876-d763-4802-881e-378a1fc6e3cd"],
Cell[CellGroupData[{
Cell[131470, 2906, 212, 5, 105, "Input",ExpressionUUID->"2592b804-d436-42a6-94e1-b7b191000e81"],
Cell[131685, 2913, 140, 3, 105, "Output",ExpressionUUID->"f96ec101-a5b2-4197-bb40-334aea4703bc"]
}, Open  ]],
Cell[131840, 2919, 90, 0, 105, "Text",ExpressionUUID->"fda72770-ac29-403d-9aca-7711d0477f0b"],
Cell[CellGroupData[{
Cell[131955, 2923, 158, 3, 105, "Input",ExpressionUUID->"2785f57e-c9ba-47e5-8623-d1c91559d9c0"],
Cell[132116, 2928, 140, 3, 105, "Output",ExpressionUUID->"44c9389a-6fc5-4c92-bd42-a387e84818ca"]
}, Open  ]],
Cell[132271, 2934, 90, 0, 105, "Text",ExpressionUUID->"1050d609-9853-4ea8-b1a0-3dd3d70d2c5e"],
Cell[CellGroupData[{
Cell[132386, 2938, 141, 3, 105, "Input",ExpressionUUID->"d23153cd-7d0b-425e-aca8-48ad18cd6cb8"],
Cell[132530, 2943, 100, 1, 105, "Output",ExpressionUUID->"0c34c1bb-c6ab-445f-b677-3f669907eca8"]
}, Open  ]],
Cell[132645, 2947, 171, 3, 105, "Text",ExpressionUUID->"eb4b0313-57e3-4059-8296-22f592d8498a"],
Cell[CellGroupData[{
Cell[132841, 2954, 216, 5, 105, "Input",ExpressionUUID->"0bd02c1d-5456-4d65-831e-dbaa337d59b0"],
Cell[133060, 2961, 140, 3, 105, "Output",ExpressionUUID->"f743744f-03d4-43c9-ac2e-b670ae5312a9"]
}, Open  ]],
Cell[133215, 2967, 227, 7, 105, "Text",ExpressionUUID->"1124b5f6-2f7c-46ed-b086-cb6e660f3ce9"],
Cell[CellGroupData[{
Cell[133467, 2978, 116, 1, 105, "Input",ExpressionUUID->"b5c28607-2aa5-4ae1-a7fc-05d4260d9fd9"],
Cell[133586, 2981, 117, 1, 105, "Output",ExpressionUUID->"89bb9126-bd52-4c0c-ab5e-e6782c3e432b"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[133752, 2988, 118, 0, 105, "Subsection",ExpressionUUID->"62ff6bca-05b2-4ca9-83dc-597365259df4"],
Cell[133873, 2990, 127, 0, 105, "Text",ExpressionUUID->"a4265fb0-e1ec-4558-b6e2-f14db9cd5394"],
Cell[134003, 2992, 889, 28, 105, "Input",ExpressionUUID->"4d33e28a-0cf9-4c30-adc3-418ea44b927c"],
Cell[134895, 3022, 187, 5, 105, "Text",ExpressionUUID->"627b9efe-ee0b-4cfc-8c0a-f9a5fb66311d"],
Cell[CellGroupData[{
Cell[135107, 3031, 169, 4, 105, "Input",ExpressionUUID->"bc9b18ed-22a6-42f2-a86e-6a626052b10c"],
Cell[135279, 3037, 100, 1, 105, "Output",ExpressionUUID->"0b78695e-c1b4-4785-9b6d-e6d4443844cb"]
}, Open  ]],
Cell[135394, 3041, 94, 0, 105, "Text",ExpressionUUID->"7db34787-376e-423e-b3b5-ac6e230e5eec"],
Cell[CellGroupData[{
Cell[135513, 3045, 209, 5, 105, "Input",ExpressionUUID->"58b90001-b1bf-4cfe-ad72-a886d3286c64"],
Cell[135725, 3052, 140, 3, 105, "Output",ExpressionUUID->"5ea418e8-eaef-42a0-bace-f25655367bc5"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[135914, 3061, 99, 0, 105, "Subsection",ExpressionUUID->"f7d72fc2-56ed-4b06-a2ca-07e984d26866"],
Cell[136016, 3063, 262, 6, 105, "Text",ExpressionUUID->"28070502-b893-4c7b-b56a-cd575d38e429"],
Cell[136281, 3071, 1745, 48, 105, "Input",ExpressionUUID->"e64e1a54-8d1a-4ac1-8816-4f29670a2be7"],
Cell[138029, 3121, 499, 11, 105, "Text",ExpressionUUID->"4fe51d35-e7b4-43db-a1d7-7f5a639a3f2f"],
Cell[CellGroupData[{
Cell[138553, 3136, 222, 6, 105, "Input",ExpressionUUID->"a6f2351f-8fd3-453e-80ba-f96fd9498779"],
Cell[138778, 3144, 180, 3, 105, "Output",ExpressionUUID->"b6c05d20-26fd-41d8-a74a-5cfbcaedf70c"]
}, Open  ]],
Cell[138973, 3150, 160, 3, 105, "Text",ExpressionUUID->"72e475d0-225d-4478-884e-761317c44229"],
Cell[CellGroupData[{
Cell[139158, 3157, 197, 5, 105, "Input",ExpressionUUID->"2694cd2b-078b-4b56-8a67-b6317e9b753b"],
Cell[139358, 3164, 180, 3, 105, "Output",ExpressionUUID->"6d9ed86a-2f5c-4ca0-8cfd-7cf49bb06a66"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[139587, 3173, 202, 3, 105, "Subsection",ExpressionUUID->"acc62e18-07b3-49fb-b0b6-bb499f5fd394"],
Cell[139792, 3178, 516, 12, 105, "Text",ExpressionUUID->"3fb402c5-bab1-4d60-b28a-99d912ad3738"],
Cell[140311, 3192, 1474, 42, 105, "Input",ExpressionUUID->"efeda4a4-73ff-45f1-a433-031907d78f9c"],
Cell[141788, 3236, 250, 6, 105, "Text",ExpressionUUID->"83d715c7-32d7-4d70-80f7-215c9175c2f2"],
Cell[142041, 3244, 296, 8, 105, "Text",ExpressionUUID->"808b2289-873a-4249-97aa-f48bff1c571c"],
Cell[142340, 3254, 640, 15, 105, "Text",ExpressionUUID->"df66c78f-f439-41d4-b5d0-e632289b1813"],
Cell[142983, 3271, 1366, 36, 105, "Input",ExpressionUUID->"466e1b10-b54d-4ef8-84ab-904ddb64fa6d"],
Cell[144352, 3309, 129, 0, 105, "Text",ExpressionUUID->"a5818454-578c-44cf-a09f-287dcc9efe85"],
Cell[CellGroupData[{
Cell[144506, 3313, 176, 4, 105, "Input",ExpressionUUID->"cdf2066c-1a10-4982-bd20-bb111c7a3b3d"],
Cell[144685, 3319, 154, 4, 105, "Output",ExpressionUUID->"3c67e008-50cc-40e3-95f0-59b6c042e3ab"]
}, Open  ]],
Cell[144854, 3326, 313, 5, 105, "Text",ExpressionUUID->"97e49037-270f-4949-a33d-fffd1045c22d"],
Cell[CellGroupData[{
Cell[145192, 3335, 177, 4, 105, "Input",ExpressionUUID->"340fd896-675c-48b6-a196-7a74656fb625"],
Cell[145372, 3341, 768, 25, 105, "Output",ExpressionUUID->"f5ac8dcf-40b8-48c5-b801-2b2889fd6a41"]
}, Open  ]],
Cell[146155, 3369, 230, 5, 105, "Text",ExpressionUUID->"e356db98-52f6-4f97-b599-d43a94988d00"],
Cell[146388, 3376, 264, 7, 105, "Input",ExpressionUUID->"24daa325-5ba7-422b-b5f5-fb24c6d2c4de"],
Cell[CellGroupData[{
Cell[146677, 3387, 152, 3, 105, "Input",ExpressionUUID->"bcff4fc8-9f2d-436f-9dea-6cac18cb9957"],
Cell[146832, 3392, 140, 3, 105, "Output",ExpressionUUID->"3c4bee3d-e06f-486a-b7ed-51cd3f93ea58"]
}, Open  ]],
Cell[146987, 3398, 254, 8, 105, "Text",ExpressionUUID->"2a44fd8b-f2d8-4d1f-8e41-24b27d1adb38"],
Cell[CellGroupData[{
Cell[147266, 3410, 118, 1, 105, "Input",ExpressionUUID->"24fa7578-0ea5-4473-b8cf-d6e064913baf"],
Cell[147387, 3413, 108, 1, 105, "Output",ExpressionUUID->"36d9f69b-b1c4-4d1a-b2c8-1bfda959f3fc"]
}, Open  ]],
Cell[147510, 3417, 156, 4, 105, "Text",ExpressionUUID->"0bbf3b25-cb2a-43d9-88ff-e11325457664"],
Cell[CellGroupData[{
Cell[147691, 3425, 240, 5, 105, "Input",ExpressionUUID->"94b41624-0ff9-4aff-af95-1c1d00043f2c"],
Cell[147934, 3432, 27478, 621, 105, "Output",ExpressionUUID->"483a94f7-a892-42da-b8ef-51ee8ad1f0f2"]
}, Open  ]],
Cell[175427, 4056, 311, 8, 105, "Text",ExpressionUUID->"95aba928-3c12-4004-9a31-1d91e4e42844"],
Cell[CellGroupData[{
Cell[175763, 4068, 322, 9, 105, "Input",ExpressionUUID->"2fd405e6-e8ce-40f0-aad4-4c16e960059f"],
Cell[176088, 4079, 106, 1, 105, "Output",ExpressionUUID->"3b0c1196-2d63-4c12-be7a-f932a086c873"]
}, Open  ]],
Cell[176209, 4083, 179, 3, 105, "Text",ExpressionUUID->"c9e8ca02-feac-4a71-8f6a-4599552a74b9"],
Cell[CellGroupData[{
Cell[176413, 4090, 322, 9, 105, "Input",ExpressionUUID->"20701e63-8d60-4ba9-a461-5996afff2e18"],
Cell[176738, 4101, 151, 3, 105, "Output",ExpressionUUID->"8cfc537d-bb79-4f21-9fe8-cb1b9116bbe8"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[176950, 4111, 82, 0, 105, "Section",ExpressionUUID->"a72789e1-ea51-4958-bc78-110151e9477f"],
Cell[CellGroupData[{
Cell[177057, 4115, 158, 2, 105, "Subsection",ExpressionUUID->"ded42c74-ef18-4557-8354-2c820271e3e4"],
Cell[177218, 4119, 477, 11, 105, "Text",ExpressionUUID->"59bb4ef2-a97e-4bd7-ad41-f235590ad1b4"],
Cell[177698, 4132, 696, 15, 105, "Text",ExpressionUUID->"220c48f0-956f-485c-b9b6-f71c86838bc9"],
Cell[178397, 4149, 287, 6, 105, "Text",ExpressionUUID->"5789085f-2508-43c0-b681-9464d927b5d1"],
Cell[178687, 4157, 142, 4, 105, "Text",ExpressionUUID->"0129c179-5988-4070-aac9-8287471f2397"],
Cell[178832, 4163, 851, 25, 105, "Input",ExpressionUUID->"ce587060-b6fc-47f1-a169-55c48305d6d8"],
Cell[179686, 4190, 240, 8, 105, "Text",ExpressionUUID->"0ef335d7-ecf9-43fd-81cc-04874f05f576"],
Cell[CellGroupData[{
Cell[179951, 4202, 208, 5, 105, "Input",ExpressionUUID->"6cd7200e-6196-45ec-87ec-bc4fddb04adc"],
Cell[CellGroupData[{
Cell[180184, 4211, 127, 2, 105, "Print",ExpressionUUID->"3c350864-0415-45b0-8ae7-379e27f32fab"],
Cell[180314, 4215, 127, 2, 105, "Print",ExpressionUUID->"f64aa089-6204-4e00-9159-e27739f79397"],
Cell[180444, 4219, 127, 2, 105, "Print",ExpressionUUID->"4228d358-8d42-43f4-8c96-1c147a59adcb"],
Cell[180574, 4223, 127, 2, 105, "Print",ExpressionUUID->"1acd0c29-df39-454f-bee8-89f0ed0550e3"],
Cell[180704, 4227, 127, 2, 105, "Print",ExpressionUUID->"8701c352-a054-42af-94bb-a10195908e91"],
Cell[180834, 4231, 127, 2, 105, "Print",ExpressionUUID->"04389429-a78a-4b9a-91ef-98c5f699ce69"],
Cell[180964, 4235, 128, 2, 105, "Print",ExpressionUUID->"ed87761d-a358-45ce-8526-52c89c47c6b2"],
Cell[181095, 4239, 129, 2, 105, "Print",ExpressionUUID->"155bd354-a25a-47fa-9804-0ca5c5a7628d"],
Cell[181227, 4243, 129, 2, 105, "Print",ExpressionUUID->"2ecc3796-15e9-4b3f-b06e-7fe3064815c7"],
Cell[181359, 4247, 129, 2, 105, "Print",ExpressionUUID->"3c212ca1-6c04-4581-861b-318d8f71c9e9"],
Cell[181491, 4251, 129, 2, 105, "Print",ExpressionUUID->"56837f8b-a781-4d5c-a4df-6f9767b539d4"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[181693, 4261, 84, 0, 105, "Section",ExpressionUUID->"0ec2eb59-df22-4c1e-ac06-95e7fed0ef0e"],
Cell[181780, 4263, 1074, 26, 105, "Text",ExpressionUUID->"a02ca608-858f-40a3-928f-1dc52d90bb62"],
Cell[182857, 4291, 436, 13, 105, "Text",ExpressionUUID->"8d357cad-78d3-492d-be05-08777a05aaed"],
Cell[183296, 4306, 328, 7, 105, "Text",ExpressionUUID->"e17aeb0c-eb82-49b2-85ee-7462c15e1a0f"],
Cell[CellGroupData[{
Cell[183649, 4317, 480, 13, 105, "Input",ExpressionUUID->"4f65d16e-fbab-4223-9579-192e8d085f0d",
 CellID->1828271894],
Cell[184132, 4332, 163, 3, 105, "Output",ExpressionUUID->"b1e2b70b-29ab-41e3-9e45-071accde1cf5"],
Cell[184298, 4337, 25880, 477, 105, "Output",ExpressionUUID->"8634e950-75e5-48f8-99c0-c04ce20b8836"]
}, Open  ]],
Cell[210193, 4817, 517, 13, 105, "Text",ExpressionUUID->"9c626f1b-107c-4889-8f72-6bda721a45c1"],
Cell[CellGroupData[{
Cell[210735, 4834, 108, 1, 105, "Input",ExpressionUUID->"dba93a9b-6069-494b-826b-06f4de88ed8c"],
Cell[210846, 4837, 100, 1, 105, "Output",ExpressionUUID->"f883c3de-a82b-4f13-bb4e-1a0c7ea8a57a"]
}, Open  ]],
Cell[210961, 4841, 395, 7, 105, "Text",ExpressionUUID->"cd28ba0e-bb06-4c09-a247-7d2a31a1a3f8"],
Cell[211359, 4850, 983, 27, 105, "Text",ExpressionUUID->"17d49148-c0dc-43f6-9d32-8c46a1ca170c"],
Cell[CellGroupData[{
Cell[212367, 4881, 103, 0, 105, "Subsection",ExpressionUUID->"1ede5dcb-2196-4127-a67b-e29cd7b19860"],
Cell[212473, 4883, 376, 9, 105, "Text",ExpressionUUID->"98697066-119c-4372-a225-fa794b204fe2"],
Cell[212852, 4894, 1142, 31, 105, "Input",ExpressionUUID->"43368460-ad08-40fe-95af-fa309086fe1a"],
Cell[213997, 4927, 188, 4, 105, "Text",ExpressionUUID->"e1a6779d-e0ab-41fa-9281-bd16fa7c1b95"],
Cell[CellGroupData[{
Cell[214210, 4935, 309, 9, 105, "Input",ExpressionUUID->"0f7bc37c-7932-4d1b-ad17-3cf2b442abff"],
Cell[214522, 4946, 768, 25, 105, "Output",ExpressionUUID->"9b037a89-7461-4ae4-867b-95cdb5d11844"]
}, Open  ]],
Cell[215305, 4974, 601, 12, 105, "Text",ExpressionUUID->"fa37bae6-e6d8-4cbd-8cd6-0d9c99d3182d"],
Cell[215909, 4988, 106, 0, 105, "Text",ExpressionUUID->"d60bafda-ba9d-41fd-b6da-7710e6c6ada7"],
Cell[CellGroupData[{
Cell[216040, 4992, 727, 21, 105, "Input",ExpressionUUID->"7221aa5a-bb5a-4b1f-8066-2b6c1db31aaa"],
Cell[216770, 5015, 164, 3, 105, "Output",ExpressionUUID->"dde84b12-e2a1-436f-9852-4b481d0ec34b"]
}, Open  ]],
Cell[216949, 5021, 126, 0, 105, "Text",ExpressionUUID->"f0423866-dcba-4bd7-a9d1-f377aef4794e"],
Cell[CellGroupData[{
Cell[217100, 5025, 108, 1, 105, "Input",ExpressionUUID->"3db59b91-b9b9-4056-8e4c-f95bfcb35065"],
Cell[217211, 5028, 26446, 486, 105, "Output",ExpressionUUID->"b38d2e44-7b17-4e39-8b7f-da45d38e2563"]
}, Open  ]],
Cell[243672, 5517, 450, 12, 105, "Text",ExpressionUUID->"02b9cd8f-02d9-4ea5-870a-f207bf18c919"]
}, Open  ]],
Cell[CellGroupData[{
Cell[244159, 5534, 164, 2, 105, "Subsection",ExpressionUUID->"5f8d921c-c6f9-4eb2-a04b-d9df7f708e50"],
Cell[244326, 5538, 382, 13, 105, "Text",ExpressionUUID->"64e10b8e-4d4a-439c-b4b6-1110c0fcc7ed"],
Cell[244711, 5553, 657, 15, 105, "Input",ExpressionUUID->"2efeffb8-07bd-4499-a3ec-70421bfdd1aa"],
Cell[245371, 5570, 163, 3, 105, "Text",ExpressionUUID->"c3bb7b18-8f0a-4beb-a1cf-86d63d4a64e7"],
Cell[CellGroupData[{
Cell[245559, 5577, 427, 10, 105, "Input",ExpressionUUID->"48812641-6ac8-45e9-a5c3-2a2f55f884bf"],
Cell[245989, 5589, 164, 3, 105, "Output",ExpressionUUID->"c3e1f2fe-fae3-4f80-b8de-443bc2c9ef33"],
Cell[246156, 5594, 26738, 492, 105, "Output",ExpressionUUID->"5781b052-7a4d-4233-8103-4c4fa613aed1"]
}, Open  ]],
Cell[272909, 6089, 434, 11, 105, "Input",ExpressionUUID->"cc13ca5c-7938-4e3b-8c97-6e5532c9a2e1"],
Cell[CellGroupData[{
Cell[273368, 6104, 296, 8, 105, "Input",ExpressionUUID->"62ec5868-333a-46b1-8462-21fd797f184f"],
Cell[273667, 6114, 100, 1, 105, "Output",ExpressionUUID->"2ebc5e4d-2baa-4989-91b7-ff8f0f990c32"]
}, Open  ]],
Cell[273782, 6118, 222, 5, 105, "Text",ExpressionUUID->"a7d63e99-69a0-43a0-8ec7-883149b93eea"],
Cell[274007, 6125, 951, 26, 105, "Input",ExpressionUUID->"1c96f52d-e706-4c05-8930-493190cab905"],
Cell[274961, 6153, 121, 0, 105, "Text",ExpressionUUID->"0e689bf3-0073-41b6-8003-847ab4c65a28"],
Cell[CellGroupData[{
Cell[275107, 6157, 464, 12, 105, "Input",ExpressionUUID->"b4d52662-0d62-41ef-a5a9-601a429ce51d"],
Cell[275574, 6171, 163, 3, 105, "Output",ExpressionUUID->"3d1c6fd0-8902-4c6e-809b-3e1d8daa1944"]
}, Open  ]],
Cell[CellGroupData[{
Cell[275774, 6179, 118, 1, 105, "Input",ExpressionUUID->"c75c26fe-6841-43a6-9346-57bbd929f608"],
Cell[275895, 6182, 26743, 492, 105, "Output",ExpressionUUID->"40fa522c-cf7b-4bbc-8695-31ec7e95719c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[302675, 6679, 108, 1, 105, "Input",ExpressionUUID->"38f40082-7c3e-4739-bc8f-26118072e862"],
Cell[302786, 6682, 100, 1, 105, "Output",ExpressionUUID->"4798448d-519e-4c04-87fa-1eb2bac948cf"]
}, Open  ]],
Cell[302901, 6686, 712, 19, 105, "Text",ExpressionUUID->"f8a05907-c8c3-4a5a-8be1-6290b10637bd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[303650, 6710, 122, 0, 105, "Subsection",ExpressionUUID->"7a9c38bb-8b05-4da0-a11a-bd2c7a437a8b"],
Cell[303775, 6712, 1092, 30, 105, "Input",ExpressionUUID->"7454e87b-4e2e-4350-9316-e567fa76165f"],
Cell[304870, 6744, 167, 3, 105, "Text",ExpressionUUID->"840e6615-79a8-4eed-a32e-3466e30d1b8f"],
Cell[CellGroupData[{
Cell[305062, 6751, 512, 14, 105, "Input",ExpressionUUID->"5b61b030-bc5b-411e-9f4e-f6af0ac7b1c6"],
Cell[305577, 6767, 164, 3, 105, "Output",ExpressionUUID->"e5b55702-5295-4b05-9548-1b244bd2bea1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[305778, 6775, 118, 1, 105, "Input",ExpressionUUID->"44074674-c260-4184-b76e-b6d601889e2f"],
Cell[305899, 6778, 27429, 508, 105, "Output",ExpressionUUID->"2e161d3c-7465-45c8-8b6d-9762eaedc9f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[333365, 7291, 108, 1, 105, "Input",ExpressionUUID->"c228a13a-0cce-4137-8b66-bcead57c7e0c"],
Cell[333476, 7294, 100, 1, 105, "Output",ExpressionUUID->"0436c7e0-3283-4078-a55c-8a403a240c07"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[333625, 7301, 121, 0, 105, "Subsection",ExpressionUUID->"2865a30c-6cf2-4e41-9ebc-4830f8b21fd7"],
Cell[333749, 7303, 1317, 35, 105, "Text",ExpressionUUID->"7a39bedf-5f5f-48d0-8b0f-5dc5bcbf2cf7"],
Cell[335069, 7340, 679, 18, 105, "Input",ExpressionUUID->"e177fb22-d532-48a5-8845-71daa6c9c4b1"],
Cell[CellGroupData[{
Cell[335773, 7362, 343, 9, 105, "Input",ExpressionUUID->"8a7f4f06-8b9c-41bc-ab20-c86c0c58c73f"],
Cell[336119, 7373, 164, 3, 105, "Output",ExpressionUUID->"678ad4b6-ce12-4f92-baac-6bac73d7ccc5"]
}, Open  ]],
Cell[336298, 7379, 205, 3, 105, "Text",ExpressionUUID->"d7efc743-fa3a-4336-a1f3-bfd3b96c0e7a"],
Cell[CellGroupData[{
Cell[336528, 7386, 111, 1, 105, "Input",ExpressionUUID->"986089af-0887-4fdf-88e9-32938da73d4e"],
Cell[336642, 7389, 140, 3, 105, "Output",ExpressionUUID->"ad14bf1d-c01d-4b64-bb21-b7f1475f9750"]
}, Open  ]],
Cell[CellGroupData[{
Cell[336819, 7397, 118, 1, 105, "Input",ExpressionUUID->"45f9de7d-0f03-469f-b074-0ea0828888a5"],
Cell[336940, 7400, 27514, 510, 105, "Output",ExpressionUUID->"a49e4edd-1733-4943-860b-1051ca73d4c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[364491, 7915, 108, 1, 105, "Input",ExpressionUUID->"061ffdee-af52-473d-a56d-f15fba9667c9"],
Cell[364602, 7918, 100, 1, 105, "Output",ExpressionUUID->"564cbf01-ed72-4e70-a959-adf54ff90066"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[364751, 7925, 164, 2, 105, "Subsection",ExpressionUUID->"05fbcf16-20f3-43f9-a360-9e48146f6389"],
Cell[364918, 7929, 189, 5, 105, "Text",ExpressionUUID->"e9bf11a5-5c51-4af6-9849-1b87e5044dd5"],
Cell[365110, 7936, 1020, 28, 105, "Input",ExpressionUUID->"c25164ab-a4da-44aa-9796-f0fa7895ed42"],
Cell[366133, 7966, 90, 0, 105, "Text",ExpressionUUID->"4779f33a-5cb1-4673-9cf6-edf259cabdcb"],
Cell[CellGroupData[{
Cell[366248, 7970, 535, 14, 105, "Input",ExpressionUUID->"f866964b-e0d8-47ee-84dc-ca312103f2c6"],
Cell[366786, 7986, 163, 3, 105, "Output",ExpressionUUID->"9c1360e6-a286-4f55-80f5-42229743d022"]
}, Open  ]],
Cell[CellGroupData[{
Cell[366986, 7994, 118, 1, 105, "Input",ExpressionUUID->"56975848-40f2-41a6-bfae-30e5e01bcb41"],
Cell[367107, 7997, 26732, 492, 105, "Output",ExpressionUUID->"d5323c50-c6c8-4a0c-a2ad-995e8d9627ec"]
}, Open  ]],
Cell[CellGroupData[{
Cell[393876, 8494, 108, 1, 105, "Input",ExpressionUUID->"d24ba61a-47f0-43e3-a504-a9ee7d6ba2c7"],
Cell[393987, 8497, 100, 1, 105, "Output",ExpressionUUID->"00f149e8-1de6-4e4c-9913-7a21ae018d41"]
}, Open  ]],
Cell[394102, 8501, 204, 3, 105, "Text",ExpressionUUID->"3bf328b7-c155-4f6c-95f8-e814d0f5d7b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[394343, 8509, 213, 3, 105, "Subsection",ExpressionUUID->"9d9bb729-6b87-403d-b14a-07adff51799e"],
Cell[394559, 8514, 967, 26, 105, "Input",ExpressionUUID->"9fb25353-32a9-456b-ae9a-a23c745442b5"],
Cell[CellGroupData[{
Cell[395551, 8544, 1133, 30, 105, "Input",ExpressionUUID->"3ffed35a-020d-49a8-818f-12e2e29e5797"],
Cell[396687, 8576, 165, 3, 105, "Output",ExpressionUUID->"05a2a39e-1af3-4849-a3a6-be40b1b5e458"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396889, 8584, 118, 1, 105, "Input",ExpressionUUID->"2effc82f-aceb-4ec1-a4ea-255ba61b6fe0"],
Cell[397010, 8587, 26732, 492, 105, "Output",ExpressionUUID->"4403ad9d-7e49-41bb-8674-cc976550a7db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[423779, 9084, 108, 1, 105, "Input",ExpressionUUID->"6bde0c9e-bbb6-4500-930f-5d7311355d31"],
Cell[423890, 9087, 100, 1, 105, "Output",ExpressionUUID->"ba32436c-9b3c-42d0-ba11-cd0378f1977c"]
}, Open  ]],
Cell[424005, 9091, 168, 3, 105, "Text",ExpressionUUID->"6f622011-f225-407c-aa6e-913f6de4b53d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[424222, 9100, 84, 0, 105, "Section",ExpressionUUID->"9411e01a-7a1d-49ab-b062-a0f2d3689a0b"],
Cell[424309, 9102, 513, 11, 105, "Text",ExpressionUUID->"492e58ac-7791-44ec-97ea-f53862639739"]
}, Open  ]]
}, Open  ]]
}
]
*)

